{"version":3,"file":"J-ABS-STAR.js","sources":["../../src/core/Aliased.js","../../src/core/Metadata.js","../../src/core/PluginParameters.js","../../src/core/DefaultValues.js","../../src/core/VersionCheck.js","../../src/models/StarPhases.js","../../src/managers/BattleManager.js","../../src/managers/DataManager.js","../../src/scenes/SceneMap.js","../../src/gameObjects/GameInterpreter.js","../../src/gameObjects/GameMap.js","../../src/gameObjects/GamePlayer.js","../../src/gameObjects/GameTroop.js"],"sourcesContent":["/**\r\n * The aliased classes within this plugin.\r\n */\r\nJ.STAR.Aliased = {\r\n  BattleManager: {},\r\n  DataManager: {},\r\n  Game_BattleMap: {},\r\n  Game_Character: {},\r\n  Game_Event: {},\r\n  Game_Interpreter: {},\r\n  Game_Map: {},\r\n  Game_Player: {},\r\n  Game_Troop: {},\r\n  Scene_Map: {},\r\n};","/**\r\n * The metadata for this plugin.\r\n */\r\nJ.STAR.Metadata = {\r\n  Name: 'J-ABS-STAR',\r\n  Version: '1.0.0',\r\n};","/**\r\n * The actual `plugin parameters` extracted from RMMZ.\r\n */\r\nJ.STAR.PluginParameters = PluginManager.parameters(J.STAR.Metadata.Name);","/**\r\n * The default values for this plugin.\r\n */\r\nJ.STAR.DefaultValues = {\r\n  /**\r\n   * The mapId used when there is no mapId specified.\r\n   * @type {number}\r\n   */\r\n  EnemyMap: 110,\r\n\r\n  /**\r\n   * The maximum number of enemies that can be generated in a troop.\r\n   * Though the max in the database is higher, this keeps things smooth.\r\n   * @type {mnumber}\r\n   */\r\n  MaxEnemyCount: 12,\r\n};","/**\r\n * The implementation of the version check for this plugin.\r\n * Ensures we have the minimum required versions for the dependency plugins.\r\n */\r\n(function versionCheck() {\r\n  // Check to ensure we have the minimum required version of the J-Base plugin.\r\n  const requiredBaseVersion = '1.0.0';\r\n  const hasBaseRequirement = J.BASE.Helpers.satisfies(J.BASE.Metadata.Version, requiredBaseVersion);\r\n  if (!hasBaseRequirement) {\r\n    throw new Error(`Either missing J-Base or has a lower version than the required: ${requiredBaseVersion}`);\r\n  }\r\n\r\n// Check to ensure we have the minimum required version of the J-ABS plugin.\r\n  const requiredJabsVersion = '3.0.0';\r\n  const hasJabsRequirement = J.BASE.Helpers.satisfies(J.ABS.Metadata.Version, requiredJabsVersion);\r\n  if (!hasJabsRequirement) {\r\n    throw new Error(`Either missing J-ABS or has a lower version than the required: ${requiredJabsVersion}`);\r\n  }\r\n})();","import { StarPhase } from \"./StarPhase\";\r\n\r\n/**\r\n * \"Disengaged\" represents the state of which the player is\r\n * not in-battle at all. This is the default phase while the player wanders.\r\n * @type {StarPhase}\r\n */\r\nconst DISENGAGED = {\r\n  name: \"Disengaged\",\r\n  key: 0\r\n};\r\n\r\n/**\r\n * \"Preparing\" represents the state of which the player is\r\n * in-transition to battle from either a random or programmatic encounter.\r\n * @type {StarPhase}\r\n */\r\nconst PREPARING = {\r\n  name: \"Preparing\",\r\n  key: 1\r\n};\r\n\r\n/**\r\n * \"In-battle\" represents the state of which the player is\r\n * presently fighting the battle that they encountered.\r\n * @type {StarPhase}\r\n */\r\nconst INBATTLE = {\r\n  name: \"In-battle\",\r\n  key: 2\r\n};\r\n\r\n/**\r\n * \"Finished\" represents the state of which the player is\r\n * has reached an end-condition of battle.\r\n * @type {StarPhase}\r\n */\r\nconst FINISHED = {\r\n  name: \"Finished\",\r\n  key: 3\r\n};\r\n\r\n/**\r\n * \"Clean-up\" represents the state of which the player is\r\n * either reigning victorious, seeing the \"you died\" screen, or skipping\r\n * this phase altogether for programmatic (story/dev/etc.) reasons.\r\n * @type {StarPhase}\r\n */\r\nconst CLEANUP = {\r\n  name: \"Clean-up\",\r\n  key: 4\r\n};\r\n\r\n/**\r\n * \"Back-to-map\" represents the state of which the player is\r\n * the player didn't gameover, and is now in transition\r\n * @type {StarPhase}\r\n */\r\nconst BACKTOMAP = {\r\n  name: \"Back-to-map\",\r\n  key: 5\r\n};\r\n\r\nexport { DISENGAGED, PREPARING, INBATTLE, FINISHED, CLEANUP, BACKTOMAP };\r\n\r\n// in case something goes south:\r\n/*\r\n BattleManager.starPhases = {\r\n  DISENGAGED: {\r\n    name: \"Disengaged\",\r\n    key: 0\r\n  },\r\n\r\n  PREPARING: {\r\n    name: \"Preparing\",\r\n    key: 1\r\n  },\r\n\r\n  INBATTLE: {\r\n    name: \"In-battle\",\r\n    key: 2\r\n  },\r\n\r\n  FINISHED: {\r\n    name: \"Finished\",\r\n    key: 3\r\n  },\r\n\r\n  CLEANUP: {\r\n    name: \"Clean-up\",\r\n    key: 4\r\n  },\r\n\r\n  BACKTOMAP: {\r\n    name: \"Back-to-map\",\r\n    key: 5\r\n  },\r\n};\r\n*/","import { StarPhase, StarPhases } from \"../models/_models\";\r\n\r\nBattleManager.enemyMap = BattleManager.enemyMap || { events: [] };\r\n\r\n/**\r\n * Extends `initMembers` to include our members as well.\r\n */\r\nJ.STAR.Aliased.BattleManager.initMembers = BattleManager.initMembers;\r\nBattleManager.initMembers = function() {\r\n  J.STAR.Aliased.BattleManager.initMembers.call(this);\r\n\r\n  /**\r\n   * The origin location that the player came from.\r\n   * This doubles as a return location, too.\r\n   * @type {{mapId: number, x: number, y: number}}\r\n   */\r\n  this._originLocation = null;\r\n\r\n  /**\r\n  * Whether or not the player is engaged in battle.\r\n  * @type {boolean}\r\n  */\r\n  this._inBattle = false;\r\n\r\n  /**\r\n   * An arbitrary counter for various purposes.\r\n   * @type {number}\r\n   */\r\n  this._wait = 0;\r\n\r\n  /**\r\n   * The phase of star battle we are in.\r\n   * @type {StarPhase}\r\n   */\r\n  this._starPhase = this._starPhase || StarPhases.PREPARING;\r\n};\r\n\r\n/**\r\n * Gets the current phase of star battle the player is in.\r\n * @returns {StarPhase}\r\n */\r\nBattleManager.getStarPhase = function(){\r\n  return this._starPhase ?? StarPhases.DISENGAGED;\r\n};\r\n\r\n/**\r\n * Sets the current phase of star battle to the new one by the phase's key.\r\n * @param {number} newPhaseKey \r\n */\r\nBattleManager.setStarPhase = function(newPhaseKey) {\r\n  switch (newPhaseKey) {\r\n    case StarPhases.DISENGAGED.key:\r\n      this._starPhase = StarPhases.DISENGAGED;\r\n      break;\r\n    case StarPhases.PREPARING.key:\r\n      this._starPhase = StarPhases.PREPARING;\r\n      break;\r\n    case StarPhases.INBATTLE.key:\r\n      this._starPhase = StarPhases.INBATTLE;\r\n      break;\r\n    case StarPhases.FINISHED.key:\r\n      this._starPhase = StarPhases.FINISHED;\r\n      break;\r\n    case StarPhases.CLEANUP.key:\r\n      this._starPhase = StarPhases.CLEANUP;\r\n      break;\r\n    case StarPhases.BACKTOMAP.key:\r\n      this._starPhase = StarPhases.BACKTOMAP;\r\n      break;\r\n  }\r\n};\r\n\r\n/**\r\n * Sets the wait timer to countdown from a given value.\r\n *\r\n * While the wait value is greater than 0, phases will not update.\r\n * @param {number} waitFrames The frames to wait for. \r\n */\r\nBattleManager.setWait = function(waitFrames) {\r\n  this._wait = waitFrames;\r\n};\r\n\r\n/**\r\n * Gets whether or not we are waiting.\r\n * @returns {boolean} Whether or not we are waiting.\r\n */\r\nBattleManager.waiting = function() {\r\n  if (this._wait > 0) {\r\n    this._wait--;\r\n    return true;\r\n  }\r\n\r\n  if (this._wait === 0) {\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Clears the wait timer.\r\n */\r\nBattleManager.clearWait = function() {\r\n  this._wait = 0;\r\n  console.info('the wait timer has been cleared.');\r\n};\r\n\r\n/**\r\n * Initiates star battle.\r\n * @param {{mapId: number, x: number, y: number}} originLocation The origin location that the player came from.\r\n */\r\nBattleManager.setupStarBattle = function(originLocation, battleMapId) {\r\n  BattleManager.setup($gameTroop.troop().id, true, true);\r\n  $gameSystem.onBattleStart();\r\n  this.engageInBattle();\r\n  this._originLocation = originLocation;\r\n\r\n  //* TODO: add more here for which map id to send based on player's map id?\r\n  $gamePlayer.reserveTransfer(battleMapId, 14, 9);\r\n};\r\n\r\n/**\r\n * Marks the player as \"in battle\".\r\n */\r\nBattleManager.engageInBattle = function() {\r\n  this._inBattle = true;\r\n};\r\n\r\n/**\r\n * Marks the player as \"not in battle\".\r\n */\r\nBattleManager.disengageInBattle = function() {\r\n  this._inBattle = false;\r\n};\r\n\r\n/**\r\n * Gets whether or not the player is \"in battle\".\r\n * @returns {boolean}\r\n */\r\nBattleManager.isInBattle = function() {\r\n  return this._inBattle;\r\n};\r\n\r\n/**\r\n * Gets the origin location of the player- the map info for where the player\r\n * came from prior to entering battle.\r\n * @returns {{mapId: number, x: number, y: number}}\r\n */\r\nBattleManager.origin = function() {\r\n  return this._originLocation;\r\n};","J.STAR.Aliased.DataManager.createGameObjects = DataManager.createGameObjects;\r\nDataManager.createGameObjects = function() {\r\n  J.STAR.Aliased.DataManager.createGameObjects.call(this);\r\n\r\n  DataManager.getEnemyMasterMap();\r\n};\r\n\r\n/**\r\n * Executes the retrieval of the enemy master map from which we clone all JABS battlers.\r\n */\r\nDataManager.getEnemyMasterMap = function() {\r\n  const mapId = J.STAR.DefaultValues.EnemyMap;\r\n  if (mapId > 0) {\r\n    const filename = \"Map%1.json\".format(mapId.padZero(3));\r\n    this.loadEnemyMasterMap(\"$dataMap\", filename);\r\n  } else {\r\n    throw new Error(\"Missing enemy master map.\");\r\n  }\r\n};\r\n\r\n/**\r\n * Retrieves the skill master map.\r\n * @param {string} name The name of the file to retrieve.\r\n * @param {string} src The source.\r\n */\r\nDataManager.loadEnemyMasterMap = function(name, src) {\r\n  const xhr = new XMLHttpRequest();\r\n  const url = \"data/\" + src;\r\n  xhr.open(\"GET\", url);\r\n  xhr.overrideMimeType(\"application/json\");\r\n  xhr.onload = () => this.onEnemyMapGet(xhr, name, src, url);\r\n  xhr.onerror = () => this.gracefulFail(name, src, url);\r\n  xhr.send();\r\n};\r\n\r\n/**\r\n * Retrieves the enemy map data file from a given location.\r\n * @param {XMLHttpRequest} xhr The `xhr` service for fetching files from the local.\r\n * @param {string} name The name of the file to retrieve.\r\n * @param {string} src The source.\r\n * @param {string} url The path of the file to retrieve.\r\n */\r\nDataManager.onEnemyMapGet = function(xhr, name, src, url) {\r\n  if (xhr.status < 400) {\r\n    BattleManager.enemyMap = JSON.parse(xhr.responseText);\r\n  } else {\r\n    this.gracefulFail(name, src, url);\r\n  }\r\n};","/**\r\n * OVERWRITE Disables Scene_Map's base encounter scene management.\r\n */\r\nScene_Map.prototype.updateEncounter = function() {\r\n  if ($gamePlayer.executeEncounter()) {\r\n    this.startFadeOut();\r\n  }\r\n};\r\n\r\n/**\r\n * `updateEncounterEffect` handles the zoom/flashing battle transition.\r\n */\r\nJ.STAR.Aliased.Scene_Map.update = Scene_Map.prototype.update;\r\nScene_Map.prototype.update = function() {\r\n  J.STAR.Aliased.Scene_Map.update.call(this);\r\n  //? TODO: Modify encountereffect here.\r\n};","/**\r\n * OVERWRITE Modifies the event command handler of \"Battle Processing\" to prepare for\r\n * star battle instead of a default battle.\r\n * @param {any} params The parameters from the event command.\r\n * @returns {boolean}\r\n */\r\nGame_Interpreter.prototype.command301 = function(params) {\r\n  if (!$gameParty.inBattle()) {\r\n      let troopId;\r\n      if (params[0] === 0) {\r\n          // Direct designation\r\n          troopId = params[1];\r\n      } else if (params[0] === 1) {\r\n          // Designation with a variable\r\n          troopId = $gameVariables.value(params[1]);\r\n      } else {\r\n          // Same as Random Encounters\r\n          troopId = $gamePlayer.makeEncounterTroopId();\r\n      }\r\n      if ($dataTroops[troopId]) {\r\n          BattleManager.setup(troopId, params[2], params[3]);\r\n          BattleManager.setEventCallback(n => {\r\n              this._branch[this._indent] = n;\r\n          });\r\n          $gamePlayer.makeEncounterCount();\r\n          // SceneManager.push(Scene_Battle);\r\n          $gamePlayer.prepareForStarBattle();\r\n      }\r\n  }\r\n  return true;\r\n};","import { StarPhases } from \"../models/_models\";\r\n\r\n/**\r\n * Extends `update` to also update the flow of star battle.\r\n */\r\nJ.STAR.Aliased.Game_Map.update = Game_Map.prototype.update;\r\nGame_Map.prototype.update = function() {\r\n  J.STAR.Aliased.Game_Map.update.call(this);\r\n  this.updateStarBattle();\r\n};\r\n\r\n/**\r\n * Manage the flow of star battle.\r\n */\r\nGame_Map.prototype.updateStarBattle = function() {\r\n  if (BattleManager.waiting()) {\r\n    console.log('waiting...');\r\n    return;\r\n  }\r\n\r\n  const currentPhase = BattleManager.getStarPhase();\r\n  switch (currentPhase) {\r\n    case StarPhases.DISENGAGED:\r\n      // do nothing while disengaged.\r\n      break;\r\n    case StarPhases.PREPARING:\r\n      this.starPhasePrepare();\r\n      break;\r\n    case StarPhases.INBATTLE:\r\n      this.starPhaseInBattle();\r\n      break;\r\n    case StarPhases.FINISHED:\r\n      this.starPhaseFinished();\r\n      break;\r\n    case StarPhases.CLEANUP:\r\n      break;\r\n    case StarPhases.BACKTOMAP:\r\n      break;\r\n    default: break;\r\n  }\r\n};\r\n\r\n//#region phase 1 - prepare\r\n/**\r\n * The \"prepare\" star phase.\r\n * The transition to the battlemap and generation of the troop onto the field.\r\n */\r\nGame_Map.prototype.starPhasePrepare = function() {\r\n  let battleMapId = null;\r\n  if ($dataMap.meta && $dataMap.meta[\"battleMap\"]) {\r\n    battleMapId = $dataMap.meta[\"battleMap\"];\r\n  }\r\n\r\n  const origin = {\r\n    mapId: $gameMap.mapId(),\r\n    x: $gamePlayer.x,\r\n    y: $gamePlayer.y\r\n  };\r\n  BattleManager.setupStarBattle(origin, battleMapId ?? J.STAR.DefaultValues.EnemyMap);\r\n  BattleManager.playBattleBgm();\r\n};\r\n\r\n/**\r\n * Handles the post-transfer setup for star battle.\r\n */\r\n Game_Map.prototype.postTransferEnemyParsing = function() {\r\n  if (BattleManager.getStarPhase() === StarPhases.PREPARING) {\r\n    $gameTroop.members().forEach(this.generateStarEnemy);\r\n    BattleManager.setStarPhase(StarPhases.INBATTLE.key);\r\n  }\r\n};\r\n\r\n/**\r\n * Generates an enemy and transplants it in the place of the corresponding index\r\n * of the eventId on the battle map. \r\n * @param {Game_Enemy} gameEnemy The enemy battler from the troop.\r\n * @param {number} index The index of the enemy battler in the troop.\r\n */\r\n Game_Map.prototype.generateStarEnemy = function(gameEnemy, index) {\r\n  // stop generating enemies if we reached the max count.\r\n  if (index >= J.STAR.DefaultValues.MaxEnemyCount) {\r\n    console.warn(`Exceeded enemy count limit of ${J.STAR.DefaultValues.MaxEnemyCount}.`)\r\n    return;\r\n  }\r\n\r\n  const enemyData = JsonEx.makeDeepCopy(BattleManager.enemyMap.events[gameEnemy.enemyId()]);\r\n  const originalEvent = $dataMap.events[index+1];\r\n  enemyData.x = originalEvent.x;\r\n  enemyData.y = originalEvent.y;\r\n  $dataMap.events[index+1] = enemyData;\r\n  const newEnemy = new Game_Event(J.STAR.DefaultValues.EnemyMap, index+1);\r\n  $gameMap._events[index] = newEnemy;\r\n};\r\n//#endregion phase 1 - prepare\r\n\r\n//#region phase 2 - inbattle\r\n/**\r\n * Handles the monitoring of battle-ending conditions, such as defeating all enemies.\r\n */\r\nGame_Map.prototype.starPhaseInBattle = function() {\r\n  const enemiesRemaining = $gameTroop.areEnemiesAlive();\r\n  console.log(`enemies remaining: ${enemiesRemaining}.`);\r\n  if (enemiesRemaining <= 0) {\r\n    console.log(\"victory condition met: all enemies defeated!\");\r\n    this.starVictoryConditionMet();\r\n  } \r\n};\r\n\r\n/**\r\n * Upon reaching a victory over the enemy troop, transition to the next phase.\r\n */\r\nGame_Map.prototype.starVictoryConditionMet = function() {\r\n  AudioManager.fadeOutBgm(1);\r\n  BattleManager.playVictoryMe();\r\n  BattleManager.setStarPhase(StarPhases.FINISHED.key);\r\n  BattleManager.setWait(240);\r\n};\r\n//#endregion phase 2 - inbattle\r\n\r\n//#region phase 3 - finished\r\n/**\r\n * The conclusion phase of the star battle.\r\n */\r\nGame_Map.prototype.starPhaseFinished = function() {\r\n  this.returnPlayerToOrigin();\r\n  AudioManager.stopMe();\r\n  BattleManager.setStarPhase(StarPhases.DISENGAGED.key);\r\n  BattleManager.disengageInBattle();\r\n};\r\n\r\n/**\r\n * Returns the player from whence they came.\r\n */\r\nGame_Map.prototype.returnPlayerToOrigin = function() {\r\n  const { mapId, x, y } = BattleManager.origin();\r\n  $gamePlayer.reserveTransfer(mapId, x, y);\r\n};\r\n//#endregion phase 3 - finished\r\n\r\n//#region phase 4 - cleanup\r\n//#endregion phase 4 - cleanup\r\n\r\n//#region phase 5 - backtomap\r\n//#endregion phase 5 - backtomap","import { StarPhases } from \"../models/_models\";\r\n\r\n/**\r\n * The optimal hook for when to parse out the enemies from the troop\r\n * and create JABS enemies out of each of them.\r\n */\r\nJ.STAR.Aliased.Game_Player.clearTransferInfo = Game_Player.prototype.clearTransferInfo;\r\nGame_Player.prototype.clearTransferInfo = function() {\r\n  J.STAR.Aliased.Game_Player.clearTransferInfo.call(this);\r\n  $gameMap.postTransferEnemyParsing();\r\n};\r\n\r\n/**\r\n * Extends `executeEncounter` to include preparing for star battle.\r\n */\r\nJ.STAR.Aliased.Game_Player.executeEncounter = Game_Player.prototype.executeEncounter;\r\nGame_Player.prototype.executeEncounter = function() {\r\n  const base = J.STAR.Aliased.Game_Player.executeEncounter.call(this);\r\n  if (base) {\r\n    BattleManager.setStarPhase(StarPhases.PREPARING.key);\r\n  }\r\n\r\n  return base;\r\n};","J.STAR.Aliased.Game_Troop.initialize = Game_Troop.prototype.initialize;\r\nGame_Troop.prototype.initialize = function() {\r\n  this.initMembers();\r\n  J.STAR.Aliased.Game_Troop.initialize.call(this);\r\n};\r\n\r\n/**\r\n* Initializes other properties for this class.\r\n*/\r\nGame_Troop.prototype.initMembers = function() {\r\n  /**\r\n  * The number of remaining enemies on the current map.\r\n  * @type {number}\r\n  */\r\n  this._remainingEnemyCount = 0;\r\n};\r\n\r\nGame_Troop.prototype.updateRemainingEnemyCount = function() {\r\n  this._remainingEnemyCount = $gameMap.getOpposingBattlers(\r\n    $gameBattleMap.getPlayerMapBattler()\r\n  ).length;\r\n  return this._remainingEnemyCount;\r\n};\r\n\r\nGame_Troop.prototype.areEnemiesAlive = function() {\r\n  return this.updateRemainingEnemyCount();\r\n};"],"names":["J","STAR","Aliased","BattleManager","DataManager","Game_BattleMap","Game_Character","Game_Event","Game_Interpreter","Game_Map","Game_Player","Game_Troop","Scene_Map","Metadata","Name","Version","PluginParameters","PluginManager","parameters","DefaultValues","EnemyMap","MaxEnemyCount","versionCheck","requiredBaseVersion","hasBaseRequirement","BASE","Helpers","satisfies","Error","requiredJabsVersion","hasJabsRequirement","ABS","DISENGAGED","name","key","PREPARING","INBATTLE","FINISHED","CLEANUP","BACKTOMAP","enemyMap","events","initMembers","call","_originLocation","_inBattle","_wait","_starPhase","StarPhases","getStarPhase","setStarPhase","newPhaseKey","setWait","waitFrames","waiting","clearWait","console","info","setupStarBattle","originLocation","battleMapId","setup","$gameTroop","troop","id","$gameSystem","onBattleStart","engageInBattle","$gamePlayer","reserveTransfer","disengageInBattle","isInBattle","origin","createGameObjects","getEnemyMasterMap","mapId","filename","format","padZero","loadEnemyMasterMap","src","xhr","XMLHttpRequest","url","open","overrideMimeType","onload","onEnemyMapGet","onerror","gracefulFail","send","status","JSON","parse","responseText","prototype","updateEncounter","executeEncounter","startFadeOut","update","command301","params","$gameParty","inBattle","troopId","$gameVariables","value","makeEncounterTroopId","$dataTroops","setEventCallback","n","_branch","_indent","makeEncounterCount","prepareForStarBattle","updateStarBattle","log","currentPhase","starPhasePrepare","starPhaseInBattle","starPhaseFinished","$dataMap","meta","$gameMap","x","y","playBattleBgm","postTransferEnemyParsing","members","forEach","generateStarEnemy","gameEnemy","index","warn","enemyData","JsonEx","makeDeepCopy","enemyId","originalEvent","newEnemy","_events","enemiesRemaining","areEnemiesAlive","starVictoryConditionMet","AudioManager","fadeOutBgm","playVictoryMe","returnPlayerToOrigin","stopMe","clearTransferInfo","base","initialize","_remainingEnemyCount","updateRemainingEnemyCount","getOpposingBattlers","$gameBattleMap","getPlayerMapBattler","length"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA;EACA;EACA;EACAA,CAAC,CAACC,IAAF,CAAOC,OAAP,GAAiB;EACfC,EAAAA,aAAa,EAAE,EADA;EAEfC,EAAAA,WAAW,EAAE,EAFE;EAGfC,EAAAA,cAAc,EAAE,EAHD;EAIfC,EAAAA,cAAc,EAAE,EAJD;EAKfC,EAAAA,UAAU,EAAE,EALG;EAMfC,EAAAA,gBAAgB,EAAE,EANH;EAOfC,EAAAA,QAAQ,EAAE,EAPK;EAQfC,EAAAA,WAAW,EAAE,EARE;EASfC,EAAAA,UAAU,EAAE,EATG;EAUfC,EAAAA,SAAS,EAAE;EAVI,CAAjB;;ECHA;EACA;EACA;EACAZ,CAAC,CAACC,IAAF,CAAOY,QAAP,GAAkB;EAChBC,EAAAA,IAAI,EAAE,YADU;EAEhBC,EAAAA,OAAO,EAAE;EAFO,CAAlB;;ECHA;EACA;EACA;EACAf,CAAC,CAACC,IAAF,CAAOe,gBAAP,GAA0BC,aAAa,CAACC,UAAd,CAAyBlB,CAAC,CAACC,IAAF,CAAOY,QAAP,CAAgBC,IAAzC,CAA1B;;ECHA;EACA;EACA;EACAd,CAAC,CAACC,IAAF,CAAOkB,aAAP,GAAuB;EACrB;EACF;EACA;EACA;EACEC,EAAAA,QAAQ,EAAE,GALW;;EAOrB;EACF;EACA;EACA;EACA;EACEC,EAAAA,aAAa,EAAE;EAZM,CAAvB;;ECHA;EACA;EACA;EACA;EACA,CAAC,SAASC,YAAT,GAAwB;EACvB;EACA,MAAMC,mBAAmB,GAAG,OAA5B;EACA,MAAMC,kBAAkB,GAAGxB,CAAC,CAACyB,IAAF,CAAOC,OAAP,CAAeC,SAAf,CAAyB3B,CAAC,CAACyB,IAAF,CAAOZ,QAAP,CAAgBE,OAAzC,EAAkDQ,mBAAlD,CAA3B;;EACA,MAAI,CAACC,kBAAL,EAAyB;EACvB,UAAM,IAAII,KAAJ,2EAA6EL,mBAA7E,EAAN;EACD,GANsB;;;EASvB,MAAMM,mBAAmB,GAAG,OAA5B;EACA,MAAMC,kBAAkB,GAAG9B,CAAC,CAACyB,IAAF,CAAOC,OAAP,CAAeC,SAAf,CAAyB3B,CAAC,CAAC+B,GAAF,CAAMlB,QAAN,CAAeE,OAAxC,EAAiDc,mBAAjD,CAA3B;;EACA,MAAI,CAACC,kBAAL,EAAyB;EACvB,UAAM,IAAIF,KAAJ,0EAA4EC,mBAA5E,EAAN;EACD;EACF,CAdD;;ECFA;EACA;EACA;EACA;EACA;;EACA,IAAMG,UAAU,GAAG;EACjBC,EAAAA,IAAI,EAAE,YADW;EAEjBC,EAAAA,GAAG,EAAE;EAFY,CAAnB;EAKA;EACA;EACA;EACA;EACA;;EACA,IAAMC,SAAS,GAAG;EAChBF,EAAAA,IAAI,EAAE,WADU;EAEhBC,EAAAA,GAAG,EAAE;EAFW,CAAlB;EAKA;EACA;EACA;EACA;EACA;;EACA,IAAME,QAAQ,GAAG;EACfH,EAAAA,IAAI,EAAE,WADS;EAEfC,EAAAA,GAAG,EAAE;EAFU,CAAjB;EAKA;EACA;EACA;EACA;EACA;;EACA,IAAMG,QAAQ,GAAG;EACfJ,EAAAA,IAAI,EAAE,UADS;EAEfC,EAAAA,GAAG,EAAE;EAFU,CAAjB;EAKA;EACA;EACA;EACA;EACA;EACA;;EACA,IAAMI,OAAO,GAAG;EACdL,EAAAA,IAAI,EAAE,UADQ;EAEdC,EAAAA,GAAG,EAAE;EAFS,CAAhB;EAKA;EACA;EACA;EACA;EACA;;EACA,IAAMK,SAAS,GAAG;EAChBN,EAAAA,IAAI,EAAE,aADU;EAEhBC,EAAAA,GAAG,EAAE;EAFW,CAAlB;;EAQA;EACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;EACA;EACA;;EChGA/B,aAAa,CAACqC,QAAd,GAAyBrC,aAAa,CAACqC,QAAd,IAA0B;EAAEC,EAAAA,MAAM,EAAE;EAAV,CAAnD;EAEA;EACA;EACA;;EACAzC,CAAC,CAACC,IAAF,CAAOC,OAAP,CAAeC,aAAf,CAA6BuC,WAA7B,GAA2CvC,aAAa,CAACuC,WAAzD;;EACAvC,aAAa,CAACuC,WAAd,GAA4B,YAAW;EACrC1C,EAAAA,CAAC,CAACC,IAAF,CAAOC,OAAP,CAAeC,aAAf,CAA6BuC,WAA7B,CAAyCC,IAAzC,CAA8C,IAA9C;EAEA;EACF;EACA;EACA;EACA;;EACE,OAAKC,eAAL,GAAuB,IAAvB;EAEA;EACF;EACA;EACA;;EACE,OAAKC,SAAL,GAAiB,KAAjB;EAEA;EACF;EACA;EACA;;EACE,OAAKC,KAAL,GAAa,CAAb;EAEA;EACF;EACA;EACA;;EACE,OAAKC,UAAL,GAAkB,KAAKA,UAAL,IAAmBC,SAArC;EACD,CA3BD;EA6BA;EACA;EACA;EACA;;;EACA7C,aAAa,CAAC8C,YAAd,GAA6B,YAAU;EAAA;;EACrC,6BAAO,KAAKF,UAAZ,+DAA0BC,UAA1B;EACD,CAFD;EAIA;EACA;EACA;EACA;;;EACA7C,aAAa,CAAC+C,YAAd,GAA6B,UAASC,WAAT,EAAsB;EACjD,UAAQA,WAAR;EACE,SAAKH,UAAA,CAAsBd,GAA3B;EACE,WAAKa,UAAL,GAAkBC,UAAlB;EACA;;EACF,SAAKA,SAAA,CAAqBd,GAA1B;EACE,WAAKa,UAAL,GAAkBC,SAAlB;EACA;;EACF,SAAKA,QAAA,CAAoBd,GAAzB;EACE,WAAKa,UAAL,GAAkBC,QAAlB;EACA;;EACF,SAAKA,QAAA,CAAoBd,GAAzB;EACE,WAAKa,UAAL,GAAkBC,QAAlB;EACA;;EACF,SAAKA,OAAA,CAAmBd,GAAxB;EACE,WAAKa,UAAL,GAAkBC,OAAlB;EACA;;EACF,SAAKA,SAAA,CAAqBd,GAA1B;EACE,WAAKa,UAAL,GAAkBC,SAAlB;EACA;EAlBJ;EAoBD,CArBD;EAuBA;EACA;EACA;EACA;EACA;EACA;;;EACA7C,aAAa,CAACiD,OAAd,GAAwB,UAASC,UAAT,EAAqB;EAC3C,OAAKP,KAAL,GAAaO,UAAb;EACD,CAFD;EAIA;EACA;EACA;EACA;;;EACAlD,aAAa,CAACmD,OAAd,GAAwB,YAAW;EACjC,MAAI,KAAKR,KAAL,GAAa,CAAjB,EAAoB;EAClB,SAAKA,KAAL;EACA,WAAO,IAAP;EACD;;EAED,MAAI,KAAKA,KAAL,KAAe,CAAnB,EAAsB;EACpB,WAAO,KAAP;EACD;EACF,CATD;EAWA;EACA;EACA;;;EACA3C,aAAa,CAACoD,SAAd,GAA0B,YAAW;EACnC,OAAKT,KAAL,GAAa,CAAb;EACAU,EAAAA,OAAO,CAACC,IAAR,CAAa,kCAAb;EACD,CAHD;EAKA;EACA;EACA;EACA;;;EACAtD,aAAa,CAACuD,eAAd,GAAgC,UAASC,cAAT,EAAyBC,WAAzB,EAAsC;EACpEzD,EAAAA,aAAa,CAAC0D,KAAd,CAAoBC,UAAU,CAACC,KAAX,GAAmBC,EAAvC,EAA2C,IAA3C,EAAiD,IAAjD;EACAC,EAAAA,WAAW,CAACC,aAAZ;EACA,OAAKC,cAAL;EACA,OAAKvB,eAAL,GAAuBe,cAAvB,CAJoE;;EAOpES,EAAAA,WAAW,CAACC,eAAZ,CAA4BT,WAA5B,EAAyC,EAAzC,EAA6C,CAA7C;EACD,CARD;EAUA;EACA;EACA;;;EACAzD,aAAa,CAACgE,cAAd,GAA+B,YAAW;EACxC,OAAKtB,SAAL,GAAiB,IAAjB;EACD,CAFD;EAIA;EACA;EACA;;;EACA1C,aAAa,CAACmE,iBAAd,GAAkC,YAAW;EAC3C,OAAKzB,SAAL,GAAiB,KAAjB;EACD,CAFD;EAIA;EACA;EACA;EACA;;;EACA1C,aAAa,CAACoE,UAAd,GAA2B,YAAW;EACpC,SAAO,KAAK1B,SAAZ;EACD,CAFD;EAIA;EACA;EACA;EACA;EACA;;;EACA1C,aAAa,CAACqE,MAAd,GAAuB,YAAW;EAChC,SAAO,KAAK5B,eAAZ;EACD,CAFD;;EClJA5C,CAAC,CAACC,IAAF,CAAOC,OAAP,CAAeE,WAAf,CAA2BqE,iBAA3B,GAA+CrE,WAAW,CAACqE,iBAA3D;;EACArE,WAAW,CAACqE,iBAAZ,GAAgC,YAAW;EACzCzE,EAAAA,CAAC,CAACC,IAAF,CAAOC,OAAP,CAAeE,WAAf,CAA2BqE,iBAA3B,CAA6C9B,IAA7C,CAAkD,IAAlD;EAEAvC,EAAAA,WAAW,CAACsE,iBAAZ;EACD,CAJD;EAMA;EACA;EACA;;;EACAtE,WAAW,CAACsE,iBAAZ,GAAgC,YAAW;EACzC,MAAMC,KAAK,GAAG3E,CAAC,CAACC,IAAF,CAAOkB,aAAP,CAAqBC,QAAnC;;EACA,MAAIuD,KAAK,GAAG,CAAZ,EAAe;EACb,QAAMC,QAAQ,GAAG,aAAaC,MAAb,CAAoBF,KAAK,CAACG,OAAN,CAAc,CAAd,CAApB,CAAjB;EACA,SAAKC,kBAAL,CAAwB,UAAxB,EAAoCH,QAApC;EACD,GAHD,MAGO;EACL,UAAM,IAAIhD,KAAJ,CAAU,2BAAV,CAAN;EACD;EACF,CARD;EAUA;EACA;EACA;EACA;EACA;;;EACAxB,WAAW,CAAC2E,kBAAZ,GAAiC,UAAS9C,IAAT,EAAe+C,GAAf,EAAoB;EAAA;;EACnD,MAAMC,GAAG,GAAG,IAAIC,cAAJ,EAAZ;EACA,MAAMC,GAAG,GAAG,UAAUH,GAAtB;EACAC,EAAAA,GAAG,CAACG,IAAJ,CAAS,KAAT,EAAgBD,GAAhB;EACAF,EAAAA,GAAG,CAACI,gBAAJ,CAAqB,kBAArB;;EACAJ,EAAAA,GAAG,CAACK,MAAJ,GAAa;EAAA,WAAM,KAAI,CAACC,aAAL,CAAmBN,GAAnB,EAAwBhD,IAAxB,EAA8B+C,GAA9B,EAAmCG,GAAnC,CAAN;EAAA,GAAb;;EACAF,EAAAA,GAAG,CAACO,OAAJ,GAAc;EAAA,WAAM,KAAI,CAACC,YAAL,CAAkBxD,IAAlB,EAAwB+C,GAAxB,EAA6BG,GAA7B,CAAN;EAAA,GAAd;;EACAF,EAAAA,GAAG,CAACS,IAAJ;EACD,CARD;EAUA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACAtF,WAAW,CAACmF,aAAZ,GAA4B,UAASN,GAAT,EAAchD,IAAd,EAAoB+C,GAApB,EAAyBG,GAAzB,EAA8B;EACxD,MAAIF,GAAG,CAACU,MAAJ,GAAa,GAAjB,EAAsB;EACpBxF,IAAAA,aAAa,CAACqC,QAAd,GAAyBoD,IAAI,CAACC,KAAL,CAAWZ,GAAG,CAACa,YAAf,CAAzB;EACD,GAFD,MAEO;EACL,SAAKL,YAAL,CAAkBxD,IAAlB,EAAwB+C,GAAxB,EAA6BG,GAA7B;EACD;EACF,CAND;;EC1CA;EACA;EACA;EACAvE,SAAS,CAACmF,SAAV,CAAoBC,eAApB,GAAsC,YAAW;EAC/C,MAAI5B,WAAW,CAAC6B,gBAAZ,EAAJ,EAAoC;EAClC,SAAKC,YAAL;EACD;EACF,CAJD;EAMA;EACA;EACA;;;EACAlG,CAAC,CAACC,IAAF,CAAOC,OAAP,CAAeU,SAAf,CAAyBuF,MAAzB,GAAkCvF,SAAS,CAACmF,SAAV,CAAoBI,MAAtD;;EACAvF,SAAS,CAACmF,SAAV,CAAoBI,MAApB,GAA6B,YAAW;EACtCnG,EAAAA,CAAC,CAACC,IAAF,CAAOC,OAAP,CAAeU,SAAf,CAAyBuF,MAAzB,CAAgCxD,IAAhC,CAAqC,IAArC,EADsC;EAGvC,CAHD;;ECbA;EACA;EACA;EACA;EACA;EACA;EACAnC,gBAAgB,CAACuF,SAAjB,CAA2BK,UAA3B,GAAwC,UAASC,MAAT,EAAiB;EAAA;;EACvD,MAAI,CAACC,UAAU,CAACC,QAAX,EAAL,EAA4B;EACxB,QAAIC,OAAJ;;EACA,QAAIH,MAAM,CAAC,CAAD,CAAN,KAAc,CAAlB,EAAqB;EACjB;EACAG,MAAAA,OAAO,GAAGH,MAAM,CAAC,CAAD,CAAhB;EACH,KAHD,MAGO,IAAIA,MAAM,CAAC,CAAD,CAAN,KAAc,CAAlB,EAAqB;EACxB;EACAG,MAAAA,OAAO,GAAGC,cAAc,CAACC,KAAf,CAAqBL,MAAM,CAAC,CAAD,CAA3B,CAAV;EACH,KAHM,MAGA;EACH;EACAG,MAAAA,OAAO,GAAGpC,WAAW,CAACuC,oBAAZ,EAAV;EACH;;EACD,QAAIC,WAAW,CAACJ,OAAD,CAAf,EAA0B;EACtBrG,MAAAA,aAAa,CAAC0D,KAAd,CAAoB2C,OAApB,EAA6BH,MAAM,CAAC,CAAD,CAAnC,EAAwCA,MAAM,CAAC,CAAD,CAA9C;EACAlG,MAAAA,aAAa,CAAC0G,gBAAd,CAA+B,UAAAC,CAAC,EAAI;EAChC,QAAA,KAAI,CAACC,OAAL,CAAa,KAAI,CAACC,OAAlB,IAA6BF,CAA7B;EACH,OAFD;EAGA1C,MAAAA,WAAW,CAAC6C,kBAAZ,GALsB;;EAOtB7C,MAAAA,WAAW,CAAC8C,oBAAZ;EACH;EACJ;;EACD,SAAO,IAAP;EACD,CAxBD;;ECJA;EACA;EACA;;EACAlH,CAAC,CAACC,IAAF,CAAOC,OAAP,CAAeO,QAAf,CAAwB0F,MAAxB,GAAiC1F,QAAQ,CAACsF,SAAT,CAAmBI,MAApD;;EACA1F,QAAQ,CAACsF,SAAT,CAAmBI,MAAnB,GAA4B,YAAW;EACrCnG,EAAAA,CAAC,CAACC,IAAF,CAAOC,OAAP,CAAeO,QAAf,CAAwB0F,MAAxB,CAA+BxD,IAA/B,CAAoC,IAApC;EACA,OAAKwE,gBAAL;EACD,CAHD;EAKA;EACA;EACA;;;EACA1G,QAAQ,CAACsF,SAAT,CAAmBoB,gBAAnB,GAAsC,YAAW;EAC/C,MAAIhH,aAAa,CAACmD,OAAd,EAAJ,EAA6B;EAC3BE,IAAAA,OAAO,CAAC4D,GAAR,CAAY,YAAZ;EACA;EACD;;EAED,MAAMC,YAAY,GAAGlH,aAAa,CAAC8C,YAAd,EAArB;;EACA,UAAQoE,YAAR;EACE,SAAKrE,UAAL;EACE;EACA;;EACF,SAAKA,SAAL;EACE,WAAKsE,gBAAL;EACA;;EACF,SAAKtE,QAAL;EACE,WAAKuE,iBAAL;EACA;;EACF,SAAKvE,QAAL;EACE,WAAKwE,iBAAL;EACA;EAZJ;EAmBD,CA1BD;;EA6BA;EACA;EACA;EACA;;;EACA/G,QAAQ,CAACsF,SAAT,CAAmBuB,gBAAnB,GAAsC,YAAW;EAAA;;EAC/C,MAAI1D,WAAW,GAAG,IAAlB;;EACA,MAAI6D,QAAQ,CAACC,IAAT,IAAiBD,QAAQ,CAACC,IAAT,CAAc,WAAd,CAArB,EAAiD;EAC/C9D,IAAAA,WAAW,GAAG6D,QAAQ,CAACC,IAAT,CAAc,WAAd,CAAd;EACD;;EAED,MAAMlD,MAAM,GAAG;EACbG,IAAAA,KAAK,EAAEgD,QAAQ,CAAChD,KAAT,EADM;EAEbiD,IAAAA,CAAC,EAAExD,WAAW,CAACwD,CAFF;EAGbC,IAAAA,CAAC,EAAEzD,WAAW,CAACyD;EAHF,GAAf;EAKA1H,EAAAA,aAAa,CAACuD,eAAd,CAA8Bc,MAA9B,kBAAsCZ,WAAtC,uDAAqD5D,CAAC,CAACC,IAAF,CAAOkB,aAAP,CAAqBC,QAA1E;EACAjB,EAAAA,aAAa,CAAC2H,aAAd;EACD,CAbD;EAeA;EACA;EACA;;;EACCrH,QAAQ,CAACsF,SAAT,CAAmBgC,wBAAnB,GAA8C,YAAW;EACxD,MAAI5H,aAAa,CAAC8C,YAAd,OAAiCD,SAArC,EAA2D;EACzDc,IAAAA,UAAU,CAACkE,OAAX,GAAqBC,OAArB,CAA6B,KAAKC,iBAAlC;EACA/H,IAAAA,aAAa,CAAC+C,YAAd,CAA2BF,QAAA,CAAoBd,GAA/C;EACD;EACF,CALA;EAOD;EACA;EACA;EACA;EACA;EACA;;;EACCzB,QAAQ,CAACsF,SAAT,CAAmBmC,iBAAnB,GAAuC,UAASC,SAAT,EAAoBC,KAApB,EAA2B;EACjE;EACA,MAAIA,KAAK,IAAIpI,CAAC,CAACC,IAAF,CAAOkB,aAAP,CAAqBE,aAAlC,EAAiD;EAC/CmC,IAAAA,OAAO,CAAC6E,IAAR,yCAA8CrI,CAAC,CAACC,IAAF,CAAOkB,aAAP,CAAqBE,aAAnE;EACA;EACD;;EAED,MAAMiH,SAAS,GAAGC,MAAM,CAACC,YAAP,CAAoBrI,aAAa,CAACqC,QAAd,CAAuBC,MAAvB,CAA8B0F,SAAS,CAACM,OAAV,EAA9B,CAApB,CAAlB;EACA,MAAMC,aAAa,GAAGjB,QAAQ,CAAChF,MAAT,CAAgB2F,KAAK,GAAC,CAAtB,CAAtB;EACAE,EAAAA,SAAS,CAACV,CAAV,GAAcc,aAAa,CAACd,CAA5B;EACAU,EAAAA,SAAS,CAACT,CAAV,GAAca,aAAa,CAACb,CAA5B;EACAJ,EAAAA,QAAQ,CAAChF,MAAT,CAAgB2F,KAAK,GAAC,CAAtB,IAA2BE,SAA3B;EACA,MAAMK,QAAQ,GAAG,IAAIpI,UAAJ,CAAeP,CAAC,CAACC,IAAF,CAAOkB,aAAP,CAAqBC,QAApC,EAA8CgH,KAAK,GAAC,CAApD,CAAjB;EACAT,EAAAA,QAAQ,CAACiB,OAAT,CAAiBR,KAAjB,IAA0BO,QAA1B;EACD,CAdA;EAiBD;;EACA;EACA;EACA;;;EACAlI,QAAQ,CAACsF,SAAT,CAAmBwB,iBAAnB,GAAuC,YAAW;EAChD,MAAMsB,gBAAgB,GAAG/E,UAAU,CAACgF,eAAX,EAAzB;EACAtF,EAAAA,OAAO,CAAC4D,GAAR,8BAAkCyB,gBAAlC;;EACA,MAAIA,gBAAgB,IAAI,CAAxB,EAA2B;EACzBrF,IAAAA,OAAO,CAAC4D,GAAR,CAAY,8CAAZ;EACA,SAAK2B,uBAAL;EACD;EACF,CAPD;EASA;EACA;EACA;;;EACAtI,QAAQ,CAACsF,SAAT,CAAmBgD,uBAAnB,GAA6C,YAAW;EACtDC,EAAAA,YAAY,CAACC,UAAb,CAAwB,CAAxB;EACA9I,EAAAA,aAAa,CAAC+I,aAAd;EACA/I,EAAAA,aAAa,CAAC+C,YAAd,CAA2BF,QAAA,CAAoBd,GAA/C;EACA/B,EAAAA,aAAa,CAACiD,OAAd,CAAsB,GAAtB;EACD,CALD;EAQA;;EACA;EACA;EACA;;;EACA3C,QAAQ,CAACsF,SAAT,CAAmByB,iBAAnB,GAAuC,YAAW;EAChD,OAAK2B,oBAAL;EACAH,EAAAA,YAAY,CAACI,MAAb;EACAjJ,EAAAA,aAAa,CAAC+C,YAAd,CAA2BF,UAAA,CAAsBd,GAAjD;EACA/B,EAAAA,aAAa,CAACmE,iBAAd;EACD,CALD;EAOA;EACA;EACA;;;EACA7D,QAAQ,CAACsF,SAAT,CAAmBoD,oBAAnB,GAA0C,YAAW;EACnD,8BAAwBhJ,aAAa,CAACqE,MAAd,EAAxB;EAAA,MAAQG,KAAR,yBAAQA,KAAR;EAAA,MAAeiD,CAAf,yBAAeA,CAAf;EAAA,MAAkBC,CAAlB,yBAAkBA,CAAlB;;EACAzD,EAAAA,WAAW,CAACC,eAAZ,CAA4BM,KAA5B,EAAmCiD,CAAnC,EAAsCC,CAAtC;EACD,CAHD;EAMA;EACA;EAEA;EACA;;EC7IA;EACA;EACA;EACA;;EACA7H,CAAC,CAACC,IAAF,CAAOC,OAAP,CAAeQ,WAAf,CAA2B2I,iBAA3B,GAA+C3I,WAAW,CAACqF,SAAZ,CAAsBsD,iBAArE;;EACA3I,WAAW,CAACqF,SAAZ,CAAsBsD,iBAAtB,GAA0C,YAAW;EACnDrJ,EAAAA,CAAC,CAACC,IAAF,CAAOC,OAAP,CAAeQ,WAAf,CAA2B2I,iBAA3B,CAA6C1G,IAA7C,CAAkD,IAAlD;EACAgF,EAAAA,QAAQ,CAACI,wBAAT;EACD,CAHD;EAKA;EACA;EACA;;;EACA/H,CAAC,CAACC,IAAF,CAAOC,OAAP,CAAeQ,WAAf,CAA2BuF,gBAA3B,GAA8CvF,WAAW,CAACqF,SAAZ,CAAsBE,gBAApE;;EACAvF,WAAW,CAACqF,SAAZ,CAAsBE,gBAAtB,GAAyC,YAAW;EAClD,MAAMqD,IAAI,GAAGtJ,CAAC,CAACC,IAAF,CAAOC,OAAP,CAAeQ,WAAf,CAA2BuF,gBAA3B,CAA4CtD,IAA5C,CAAiD,IAAjD,CAAb;;EACA,MAAI2G,IAAJ,EAAU;EACRnJ,IAAAA,aAAa,CAAC+C,YAAd,CAA2BF,SAAA,CAAqBd,GAAhD;EACD;;EAED,SAAOoH,IAAP;EACD,CAPD;;EChBAtJ,CAAC,CAACC,IAAF,CAAOC,OAAP,CAAeS,UAAf,CAA0B4I,UAA1B,GAAuC5I,UAAU,CAACoF,SAAX,CAAqBwD,UAA5D;;EACA5I,UAAU,CAACoF,SAAX,CAAqBwD,UAArB,GAAkC,YAAW;EAC3C,OAAK7G,WAAL;EACA1C,EAAAA,CAAC,CAACC,IAAF,CAAOC,OAAP,CAAeS,UAAf,CAA0B4I,UAA1B,CAAqC5G,IAArC,CAA0C,IAA1C;EACD,CAHD;EAKA;EACA;EACA;;;EACAhC,UAAU,CAACoF,SAAX,CAAqBrD,WAArB,GAAmC,YAAW;EAC5C;EACF;EACA;EACA;EACE,OAAK8G,oBAAL,GAA4B,CAA5B;EACD,CAND;;EAQA7I,UAAU,CAACoF,SAAX,CAAqB0D,yBAArB,GAAiD,YAAW;EAC1D,OAAKD,oBAAL,GAA4B7B,QAAQ,CAAC+B,mBAAT,CAC1BC,cAAc,CAACC,mBAAf,EAD0B,EAE1BC,MAFF;EAGA,SAAO,KAAKL,oBAAZ;EACD,CALD;;EAOA7I,UAAU,CAACoF,SAAX,CAAqB+C,eAArB,GAAuC,YAAW;EAChD,SAAO,KAAKW,yBAAL,EAAP;EACD,CAFD;;;;;;"}