declare function Window_Base(...args: any[]): void;
declare class Window_Base {
    constructor(...args: any[]);
    constructor: typeof Window_Base;
    initialize(rect: any): void;
    _opening: boolean;
    _closing: boolean;
    _dimmerSprite: Sprite;
    destroy(options: any): void;
    checkRectObject(rect: any): void;
    lineHeight(): number;
    itemWidth(): any;
    itemHeight(): number;
    itemPadding(): number;
    baseTextRect(): Rectangle;
    loadWindowskin(): void;
    windowskin: any;
    updatePadding(): void;
    padding: any;
    updateBackOpacity(): void;
    backOpacity: any;
    fittingHeight(numLines: any): number;
    updateTone(): void;
    createContents(): void;
    contents: Bitmap;
    contentsBack: Bitmap;
    destroyContents(): void;
    contentsWidth(): any;
    contentsHeight(): any;
    resetFontSettings(): void;
    resetTextColor(): void;
    update(): void;
    updateOpen(): void;
    updateClose(): void;
    open(): void;
    close(): void;
    isOpening(): boolean;
    isClosing(): boolean;
    show(): void;
    visible: boolean;
    hide(): void;
    activate(): void;
    active: boolean;
    deactivate(): void;
    systemColor(): any;
    translucentOpacity(): number;
    changeTextColor(color: any): void;
    changeOutlineColor(color: any): void;
    changePaintOpacity(enabled: any): void;
    drawRect(x: any, y: any, width: any, height: any): void;
    drawText(text: any, x: any, y: any, maxWidth: any, align: any): void;
    textWidth(text: any): number;
    drawTextEx(text: any, x: any, y: any, width: any): number;
    textSizeEx(text: any): {
        width: number;
        height: number;
    };
    createTextState(text: any, x: any, y: any, width: any): {
        text: any;
        index: number;
        x: any;
        y: any;
        width: any;
        height: number;
        startX: any;
        startY: any;
        rtl: boolean;
        buffer: string;
        drawing: boolean;
        outputWidth: number;
        outputHeight: number;
    };
    processAllText(textState: any): void;
    flushTextState(textState: any): void;
    createTextBuffer(rtl: any): "" | "â€«";
    convertEscapeCharacters(text: any): any;
    actorName(n: any): any;
    partyMemberName(n: any): any;
    processCharacter(textState: any): void;
    processControlCharacter(textState: any, c: any): void;
    processNewLine(textState: any): void;
    obtainEscapeCode(textState: any): string;
    obtainEscapeParam(textState: any): number | "";
    processEscapeCharacter(code: any, textState: any): void;
    processColorChange(colorIndex: any): void;
    processDrawIcon(iconIndex: any, textState: any): void;
    makeFontBigger(): void;
    makeFontSmaller(): void;
    calcTextHeight(textState: any): number;
    maxFontSizeInLine(line: any): number;
    drawIcon(iconIndex: any, x: any, y: any): void;
    drawFace(faceName: any, faceIndex: any, x: any, y: any, width: any, height: any): void;
    drawCharacter(characterName: any, characterIndex: any, x: any, y: any): void;
    drawItemName(item: any, x: any, y: any, width: any): void;
    drawCurrencyValue(value: any, unit: any, x: any, y: any, width: any): void;
    setBackgroundType(type: any): void;
    opacity: number;
    showBackgroundDimmer(): void;
    createDimmerSprite(): void;
    hideBackgroundDimmer(): void;
    updateBackgroundDimmer(): void;
    refreshDimmerBitmap(): void;
    playCursorSound(): void;
    playOkSound(): void;
    playBuzzerSound(): void;
}
declare function Window_Scrollable(...args: any[]): void;
declare class Window_Scrollable {
    constructor(...args: any[]);
    constructor: typeof Window_Scrollable;
    initialize(rect: any): void;
    _scrollX: any;
    _scrollY: any;
    _scrollBaseX: any;
    _scrollBaseY: any;
    clearScrollStatus(): void;
    _scrollTargetX: any;
    _scrollTargetY: any;
    _scrollDuration: number;
    _scrollAccelX: any;
    _scrollAccelY: any;
    _scrollTouching: boolean;
    _scrollLastTouchX: any;
    _scrollLastTouchY: any;
    _scrollLastCursorVisible: any;
    scrollX(): any;
    scrollY(): any;
    scrollBaseX(): any;
    scrollBaseY(): any;
    scrollTo(x: any, y: any): void;
    scrollBy(x: any, y: any): void;
    smoothScrollTo(x: any, y: any): void;
    smoothScrollBy(x: any, y: any): void;
    setScrollAccel(x: any, y: any): void;
    overallWidth(): any;
    overallHeight(): any;
    maxScrollX(): number;
    maxScrollY(): number;
    scrollBlockWidth(): any;
    scrollBlockHeight(): any;
    smoothScrollDown(n: any): void;
    smoothScrollUp(n: any): void;
    update(): void;
    processWheelScroll(): void;
    processTouchScroll(): void;
    isWheelScrollEnabled(): boolean;
    isTouchScrollEnabled(): boolean;
    isScrollEnabled(): boolean;
    isTouchedInsideFrame(): any;
    onTouchScrollStart(): void;
    onTouchScroll(): void;
    cursorVisible: any;
    onTouchScrollEnd(): void;
    updateSmoothScroll(): void;
    updateScrollAccel(): void;
    updateArrows(): void;
    downArrowVisible: boolean;
    upArrowVisible: boolean;
    updateOrigin(): void;
    updateScrollBase(baseX: any, baseY: any): void;
    paint(): void;
}
declare function Window_Selectable(...args: any[]): void;
declare class Window_Selectable {
    constructor(...args: any[]);
    constructor: typeof Window_Selectable;
    initialize(rect: any): void;
    _index: any;
    _cursorFixed: any;
    _cursorAll: any;
    _helpWindow: any;
    _handlers: {};
    _doubleTouch: boolean;
    _canRepeat: boolean;
    index(): any;
    cursorFixed(): any;
    setCursorFixed(cursorFixed: any): void;
    cursorAll(): any;
    setCursorAll(cursorAll: any): void;
    maxCols(): number;
    maxItems(): number;
    colSpacing(): number;
    rowSpacing(): number;
    itemWidth(): number;
    itemHeight(): any;
    contentsHeight(): any;
    maxRows(): number;
    overallHeight(): number;
    activate(): void;
    deactivate(): void;
    select(index: any): void;
    forceSelect(index: any): void;
    smoothSelect(index: any): void;
    deselect(): void;
    reselect(): void;
    cursorVisible: boolean;
    row(): number;
    topRow(): number;
    maxTopRow(): number;
    setTopRow(row: any): void;
    maxPageRows(): number;
    maxPageItems(): number;
    maxVisibleItems(): number;
    isHorizontal(): boolean;
    topIndex(): number;
    itemRect(index: any): Rectangle;
    itemRectWithPadding(index: any): Rectangle;
    itemLineRect(index: any): Rectangle;
    setHelpWindow(helpWindow: any): void;
    showHelpWindow(): void;
    hideHelpWindow(): void;
    setHandler(symbol: any, method: any): void;
    isHandled(symbol: any): boolean;
    callHandler(symbol: any): void;
    isOpenAndActive(): any;
    isCursorMovable(): boolean;
    cursorDown(wrap: any): void;
    cursorUp(wrap: any): void;
    cursorRight(wrap: any): void;
    cursorLeft(wrap: any): void;
    cursorPagedown(): void;
    cursorPageup(): void;
    isScrollEnabled(): any;
    update(): void;
    processCursorMove(): void;
    processHandling(): void;
    processTouch(): void;
    isHoverEnabled(): boolean;
    onTouchSelect(trigger: any): void;
    onTouchOk(): void;
    onTouchCancel(): void;
    hitIndex(): number;
    hitTest(x: any, y: any): number;
    isTouchOkEnabled(): any;
    isOkEnabled(): boolean;
    isCancelEnabled(): boolean;
    isOkTriggered(): boolean;
    isCancelTriggered(): boolean;
    processOk(): void;
    callOkHandler(): void;
    processCancel(): void;
    callCancelHandler(): void;
    processPageup(): void;
    processPagedown(): void;
    updateInputData(): void;
    ensureCursorVisible(smooth: any): void;
    callUpdateHelp(): void;
    updateHelp(): void;
    setHelpWindowItem(item: any): void;
    isCurrentItemEnabled(): boolean;
    drawAllItems(): void;
    drawItem(): void;
    clearItem(index: any): void;
    drawItemBackground(index: any): void;
    drawBackgroundRect(rect: any): void;
    redrawItem(index: any): void;
    redrawCurrentItem(): void;
    refresh(): void;
    paint(): void;
    refreshCursor(): void;
    refreshCursorForAll(): void;
}
declare function Window_Command(...args: any[]): void;
declare class Window_Command {
    constructor(...args: any[]);
    constructor: typeof Window_Command;
    initialize(rect: any): void;
    maxItems(): number;
    clearCommandList(): void;
    _list: any[];
    makeCommandList(): void;
    addCommand(name: any, symbol: any, enabled?: boolean, ext?: any): void;
    commandName(index: any): any;
    commandSymbol(index: any): any;
    isCommandEnabled(index: any): any;
    currentData(): any;
    isCurrentItemEnabled(): any;
    currentSymbol(): any;
    currentExt(): any;
    findSymbol(symbol: any): any;
    selectSymbol(symbol: any): void;
    findExt(ext: any): any;
    selectExt(ext: any): void;
    drawItem(index: any): void;
    itemTextAlign(): string;
    isOkEnabled(): boolean;
    callOkHandler(): void;
    refresh(): void;
}
declare function Window_HorzCommand(...args: any[]): void;
declare class Window_HorzCommand {
    constructor(...args: any[]);
    constructor: typeof Window_HorzCommand;
    initialize(rect: any): void;
    maxCols(): number;
    itemTextAlign(): string;
}
declare function Window_Help(...args: any[]): void;
declare class Window_Help {
    constructor(...args: any[]);
    constructor: typeof Window_Help;
    initialize(rect: any): void;
    _text: any;
    setText(text: any): void;
    clear(): void;
    setItem(item: any): void;
    refresh(): void;
}
declare function Window_Gold(...args: any[]): void;
declare class Window_Gold {
    constructor(...args: any[]);
    constructor: typeof Window_Gold;
    initialize(rect: any): void;
    colSpacing(): number;
    refresh(): void;
    value(): any;
    currencyUnit(): any;
    open(): void;
}
declare function Window_StatusBase(...args: any[]): void;
declare class Window_StatusBase {
    constructor(...args: any[]);
    constructor: typeof Window_StatusBase;
    initialize(rect: any): void;
    _additionalSprites: {};
    loadFaceImages(): void;
    refresh(): void;
    hideAdditionalSprites(): void;
    placeActorName(actor: any, x: any, y: any): void;
    placeStateIcon(actor: any, x: any, y: any): void;
    placeGauge(actor: any, type: any, x: any, y: any): void;
    createInnerSprite(key: any, spriteClass: any): any;
    placeTimeGauge(actor: any, x: any, y: any): void;
    placeBasicGauges(actor: any, x: any, y: any): void;
    gaugeLineHeight(): number;
    drawActorCharacter(actor: any, x: any, y: any): void;
    drawActorFace(actor: any, x: any, y: any, width: any, height: any): void;
    drawActorName(actor: any, x: any, y: any, width: any): void;
    drawActorClass(actor: any, x: any, y: any, width: any): void;
    drawActorNickname(actor: any, x: any, y: any, width: any): void;
    drawActorLevel(actor: any, x: any, y: any): void;
    drawActorIcons(actor: any, x: any, y: any, width: any): void;
    drawActorSimpleStatus(actor: any, x: any, y: any): void;
    actorSlotName(actor: any, index: any): any;
}
declare function Window_MenuCommand(...args: any[]): void;
declare class Window_MenuCommand {
    constructor(...args: any[]);
    constructor: typeof Window_MenuCommand;
    initialize(rect: any): void;
    _canRepeat: boolean;
    makeCommandList(): void;
    addMainCommands(): void;
    addFormationCommand(): void;
    addOriginalCommands(): void;
    addOptionsCommand(): void;
    addSaveCommand(): void;
    addGameEndCommand(): void;
    needsCommand(name: any): any;
    areMainCommandsEnabled(): any;
    isFormationEnabled(): any;
    isOptionsEnabled(): boolean;
    isSaveEnabled(): any;
    isGameEndEnabled(): boolean;
    processOk(): void;
    selectLast(): void;
}
declare namespace Window_MenuCommand {
    const _lastCommandSymbol: any;
    function initCommandPosition(): void;
}
declare function Window_MenuStatus(...args: any[]): void;
declare class Window_MenuStatus {
    constructor(...args: any[]);
    constructor: typeof Window_MenuStatus;
    initialize(rect: any): void;
    _formationMode: any;
    _pendingIndex: any;
    maxItems(): any;
    numVisibleRows(): number;
    itemHeight(): number;
    actor(index: any): any;
    drawItem(index: any): void;
    drawPendingItemBackground(index: any): void;
    drawItemImage(index: any): void;
    drawItemStatus(index: any): void;
    processOk(): void;
    isCurrentItemEnabled(): any;
    selectLast(): void;
    formationMode(): any;
    setFormationMode(formationMode: any): void;
    pendingIndex(): any;
    setPendingIndex(index: any): void;
}
declare function Window_MenuActor(...args: any[]): void;
declare class Window_MenuActor {
    constructor(...args: any[]);
    constructor: typeof Window_MenuActor;
    initialize(rect: any): void;
    processOk(): void;
    selectLast(): void;
    selectForItem(item: any): void;
}
declare function Window_ItemCategory(...args: any[]): void;
declare class Window_ItemCategory {
    constructor(...args: any[]);
    constructor: typeof Window_ItemCategory;
    initialize(rect: any): void;
    maxCols(): number;
    update(): void;
    makeCommandList(): void;
    needsCommand(name: any): any;
    setItemWindow(itemWindow: any): void;
    _itemWindow: any;
    needsSelection(): boolean;
}
declare function Window_ItemList(...args: any[]): void;
declare class Window_ItemList {
    constructor(...args: any[]);
    constructor: typeof Window_ItemList;
    initialize(rect: any): void;
    _category: any;
    _data: any;
    setCategory(category: any): void;
    maxCols(): number;
    colSpacing(): number;
    maxItems(): any;
    item(): any;
    itemAt(index: any): any;
    isCurrentItemEnabled(): any;
    includes(item: any): any;
    needsNumber(): any;
    isEnabled(item: any): any;
    makeItemList(): void;
    selectLast(): void;
    drawItem(index: any): void;
    numberWidth(): any;
    drawItemNumber(item: any, x: any, y: any, width: any): void;
    updateHelp(): void;
    refresh(): void;
}
declare function Window_SkillType(...args: any[]): void;
declare class Window_SkillType {
    constructor(...args: any[]);
    constructor: typeof Window_SkillType;
    initialize(rect: any): void;
    _actor: any;
    setActor(actor: any): void;
    makeCommandList(): void;
    update(): void;
    setSkillWindow(skillWindow: any): void;
    _skillWindow: any;
    selectLast(): void;
}
declare function Window_SkillStatus(...args: any[]): void;
declare class Window_SkillStatus {
    constructor(...args: any[]);
    constructor: typeof Window_SkillStatus;
    initialize(rect: any): void;
    _actor: any;
    setActor(actor: any): void;
    refresh(): void;
}
declare function Window_SkillList(...args: any[]): void;
declare class Window_SkillList {
    constructor(...args: any[]);
    constructor: typeof Window_SkillList;
    initialize(rect: any): void;
    _actor: any;
    _stypeId: any;
    _data: any;
    setActor(actor: any): void;
    setStypeId(stypeId: any): void;
    maxCols(): number;
    colSpacing(): number;
    maxItems(): any;
    item(): any;
    itemAt(index: any): any;
    isCurrentItemEnabled(): any;
    includes(item: any): boolean;
    isEnabled(item: any): any;
    makeItemList(): void;
    selectLast(): void;
    drawItem(index: any): void;
    costWidth(): any;
    drawSkillCost(skill: any, x: any, y: any, width: any): void;
    updateHelp(): void;
    refresh(): void;
}
declare function Window_EquipStatus(...args: any[]): void;
declare class Window_EquipStatus {
    constructor(...args: any[]);
    constructor: typeof Window_EquipStatus;
    initialize(rect: any): void;
    _actor: any;
    _tempActor: any;
    setActor(actor: any): void;
    colSpacing(): number;
    refresh(): void;
    setTempActor(tempActor: any): void;
    drawAllParams(): void;
    drawItem(x: any, y: any, paramId: any): void;
    drawParamName(x: any, y: any, paramId: any): void;
    drawCurrentParam(x: any, y: any, paramId: any): void;
    drawRightArrow(x: any, y: any): void;
    drawNewParam(x: any, y: any, paramId: any): void;
    rightArrowWidth(): number;
    paramWidth(): number;
    paramX(): number;
    paramY(index: any): any;
}
declare function Window_EquipCommand(...args: any[]): void;
declare class Window_EquipCommand {
    constructor(...args: any[]);
    constructor: typeof Window_EquipCommand;
    initialize(rect: any): void;
    maxCols(): number;
    makeCommandList(): void;
}
declare function Window_EquipSlot(...args: any[]): void;
declare class Window_EquipSlot {
    constructor(...args: any[]);
    constructor: typeof Window_EquipSlot;
    initialize(rect: any): void;
    _actor: any;
    setActor(actor: any): void;
    update(): void;
    maxItems(): any;
    item(): any;
    itemAt(index: any): any;
    drawItem(index: any): void;
    slotNameWidth(): number;
    isEnabled(index: any): any;
    isCurrentItemEnabled(): any;
    setStatusWindow(statusWindow: any): void;
    _statusWindow: any;
    setItemWindow(itemWindow: any): void;
    _itemWindow: any;
    updateHelp(): void;
}
declare function Window_EquipItem(...args: any[]): void;
declare class Window_EquipItem {
    constructor(...args: any[]);
    constructor: typeof Window_EquipItem;
    initialize(rect: any): void;
    _actor: any;
    _slotId: any;
    maxCols(): number;
    colSpacing(): number;
    setActor(actor: any): void;
    setSlotId(slotId: any): void;
    includes(item: any): boolean;
    etypeId(): any;
    isEnabled(): boolean;
    selectLast(): void;
    setStatusWindow(statusWindow: any): void;
    _statusWindow: any;
    updateHelp(): void;
    playOkSound(): void;
}
declare function Window_Status(...args: any[]): void;
declare class Window_Status {
    constructor(...args: any[]);
    constructor: typeof Window_Status;
    initialize(rect: any): void;
    _actor: any;
    setActor(actor: any): void;
    refresh(): void;
    drawBlock1(): void;
    block1Y(): number;
    drawBlock2(): void;
    block2Y(): number;
    drawBasicInfo(x: any, y: any): void;
    drawExpInfo(x: any, y: any): void;
    expTotalValue(): any;
    expNextValue(): any;
}
declare function Window_StatusParams(...args: any[]): void;
declare class Window_StatusParams {
    constructor(...args: any[]);
    constructor: typeof Window_StatusParams;
    initialize(rect: any): void;
    _actor: any;
    setActor(actor: any): void;
    maxItems(): number;
    itemHeight(): any;
    drawItem(index: any): void;
    drawItemBackground(): void;
}
declare function Window_StatusEquip(...args: any[]): void;
declare class Window_StatusEquip {
    constructor(...args: any[]);
    constructor: typeof Window_StatusEquip;
    initialize(rect: any): void;
    _actor: any;
    setActor(actor: any): void;
    maxItems(): any;
    itemHeight(): any;
    drawItem(index: any): void;
    drawItemBackground(): void;
}
declare function Window_Options(...args: any[]): void;
declare class Window_Options {
    constructor(...args: any[]);
    constructor: typeof Window_Options;
    initialize(rect: any): void;
    makeCommandList(): void;
    addGeneralOptions(): void;
    addVolumeOptions(): void;
    drawItem(index: any): void;
    statusWidth(): number;
    statusText(index: any): string;
    isVolumeSymbol(symbol: any): any;
    booleanStatusText(value: any): "ON" | "OFF";
    volumeStatusText(value: any): string;
    processOk(): void;
    cursorRight(): void;
    cursorLeft(): void;
    changeVolume(symbol: any, forward: any, wrap: any): void;
    volumeOffset(): number;
    changeValue(symbol: any, value: any): void;
    getConfigValue(symbol: any): any;
    setConfigValue(symbol: any, volume: any): void;
}
declare function Window_SavefileList(...args: any[]): void;
declare class Window_SavefileList {
    constructor(...args: any[]);
    constructor: typeof Window_SavefileList;
    initialize(rect: any): void;
    _mode: any;
    _autosave: any;
    setMode(mode: any, autosave: any): void;
    maxItems(): number;
    numVisibleRows(): number;
    itemHeight(): number;
    drawItem(index: any): void;
    indexToSavefileId(index: any): any;
    savefileIdToIndex(savefileId: any): number;
    isEnabled(savefileId: any): boolean;
    savefileId(): any;
    selectSavefile(savefileId: any): void;
    drawTitle(savefileId: any, x: any, y: any): void;
    drawContents(info: any, rect: any): void;
    drawPartyCharacters(info: any, x: any, y: any): void;
    drawPlaytime(info: any, x: any, y: any, width: any): void;
    playOkSound(): void;
}
declare function Window_ShopCommand(...args: any[]): void;
declare class Window_ShopCommand {
    constructor(...args: any[]);
    constructor: typeof Window_ShopCommand;
    initialize(rect: any): void;
    setPurchaseOnly(purchaseOnly: any): void;
    _purchaseOnly: any;
    maxCols(): number;
    makeCommandList(): void;
}
declare function Window_ShopBuy(...args: any[]): void;
declare class Window_ShopBuy {
    constructor(...args: any[]);
    constructor: typeof Window_ShopBuy;
    initialize(rect: any): void;
    _money: any;
    setupGoods(shopGoods: any): void;
    _shopGoods: any;
    maxItems(): number;
    item(): any;
    itemAt(index: any): any;
    setMoney(money: any): void;
    isCurrentItemEnabled(): boolean;
    price(item: any): any;
    isEnabled(item: any): boolean;
    refresh(): void;
    makeItemList(): void;
    _data: any[];
    _price: any[];
    goodsToItem(goods: any): any;
    drawItem(index: any): void;
    priceWidth(): number;
    setStatusWindow(statusWindow: any): void;
    _statusWindow: any;
    updateHelp(): void;
}
declare function Window_ShopSell(...args: any[]): void;
declare class Window_ShopSell {
    constructor(...args: any[]);
    constructor: typeof Window_ShopSell;
    initialize(rect: any): void;
    isEnabled(item: any): boolean;
}
declare function Window_ShopNumber(...args: any[]): void;
declare class Window_ShopNumber {
    constructor(...args: any[]);
    constructor: typeof Window_ShopNumber;
    initialize(rect: any): void;
    _item: any;
    _max: number;
    _price: any;
    _number: any;
    _currencyUnit: any;
    _canRepeat: boolean;
    isScrollEnabled(): boolean;
    number(): any;
    setup(item: any, max: any, price: any): void;
    setCurrencyUnit(currencyUnit: any): void;
    createButtons(): void;
    _buttons: any[];
    placeButtons(): void;
    totalButtonWidth(): any;
    buttonSpacing(): number;
    refresh(): void;
    drawCurrentItemName(): void;
    drawMultiplicationSign(): void;
    multiplicationSign(): string;
    multiplicationSignX(): number;
    drawNumber(): void;
    drawHorzLine(): void;
    drawTotalPrice(): void;
    itemNameY(): number;
    totalPriceY(): number;
    buttonY(): number;
    cursorWidth(): number;
    cursorX(): number;
    maxDigits(): number;
    update(): void;
    playOkSound(): void;
    processNumberChange(): void;
    changeNumber(amount: any): void;
    itemRect(): Rectangle;
    isTouchOkEnabled(): boolean;
    onButtonUp(): void;
    onButtonUp2(): void;
    onButtonDown(): void;
    onButtonDown2(): void;
    onButtonOk(): void;
}
declare function Window_ShopStatus(...args: any[]): void;
declare class Window_ShopStatus {
    constructor(...args: any[]);
    constructor: typeof Window_ShopStatus;
    initialize(rect: any): void;
    _item: any;
    _pageIndex: any;
    refresh(): void;
    setItem(item: any): void;
    isEquipItem(): any;
    drawPossession(x: any, y: any): void;
    drawEquipInfo(x: any, y: any): void;
    statusMembers(): any;
    pageSize(): number;
    maxPages(): number;
    drawActorEquipInfo(x: any, y: any, actor: any): void;
    drawActorParamChange(x: any, y: any, actor: any, item1: any): void;
    paramId(): 2 | 3;
    currentEquippedItem(actor: any, etypeId: any): any;
    update(): void;
    updatePage(): void;
    isPageChangeEnabled(): boolean;
    isPageChangeRequested(): boolean;
    changePage(): void;
}
declare function Window_NameEdit(...args: any[]): void;
declare class Window_NameEdit {
    constructor(...args: any[]);
    constructor: typeof Window_NameEdit;
    initialize(rect: any): void;
    _actor: any;
    _maxLength: any;
    _name: any;
    _index: any;
    _defaultName: any;
    setup(actor: any, maxLength: any): void;
    name(): any;
    restoreDefault(): boolean;
    add(ch: any): boolean;
    back(): boolean;
    faceWidth(): number;
    charWidth(): any;
    left(): number;
    itemRect(index: any): Rectangle;
    underlineRect(index: any): Rectangle;
    underlineColor(): any;
    drawUnderline(index: any): void;
    drawChar(index: any): void;
    refresh(): void;
}
declare function Window_NameInput(...args: any[]): void;
declare class Window_NameInput {
    constructor(...args: any[]);
    constructor: typeof Window_NameInput;
    initialize(rect: any): void;
    _editWindow: any;
    _page: any;
    _index: any;
    setEditWindow(editWindow: any): void;
    table(): string[][];
    maxCols(): number;
    maxItems(): number;
    itemWidth(): number;
    groupSpacing(): number;
    character(): string;
    isPageChange(): boolean;
    isOk(): boolean;
    itemRect(index: any): Rectangle;
    drawItem(index: any): void;
    updateCursor(): void;
    isCursorMovable(): any;
    cursorDown(wrap: any): void;
    cursorUp(wrap: any): void;
    cursorRight(wrap: any): void;
    cursorLeft(wrap: any): void;
    cursorPagedown(): void;
    cursorPageup(): void;
    processCursorMove(): void;
    processHandling(): void;
    isCancelEnabled(): boolean;
    processCancel(): void;
    processJump(): void;
    processBack(): void;
    processOk(): void;
    onNameAdd(): void;
    onNameOk(): void;
}
declare namespace Window_NameInput {
    const LATIN1: string[];
    const LATIN2: string[];
    const RUSSIA: string[];
    const JAPAN1: string[];
    const JAPAN2: string[];
    const JAPAN3: string[];
}
declare function Window_NameBox(...args: any[]): void;
declare class Window_NameBox {
    constructor(...args: any[]);
    constructor: typeof Window_NameBox;
    initialize(): void;
    openness: number;
    _name: any;
    setMessageWindow(messageWindow: any): void;
    _messageWindow: any;
    setName(name: any): void;
    clear(): void;
    start(): void;
    updatePlacement(): void;
    width: number;
    height: any;
    x: any;
    y: any;
    updateBackground(): void;
    windowWidth(): number;
    windowHeight(): any;
    refresh(): void;
}
declare function Window_ChoiceList(...args: any[]): void;
declare class Window_ChoiceList {
    constructor(...args: any[]);
    constructor: typeof Window_ChoiceList;
    initialize(): void;
    openness: number;
    _background: any;
    _canRepeat: boolean;
    setMessageWindow(messageWindow: any): void;
    _messageWindow: any;
    createCancelButton(): void;
    _cancelButton: Sprite_Button;
    start(): void;
    update(): void;
    updateCancelButton(): void;
    selectDefault(): void;
    updatePlacement(): void;
    x: number;
    y: any;
    width: number;
    height: any;
    updateBackground(): void;
    placeCancelButton(): void;
    windowX(): number;
    windowY(): any;
    windowWidth(): number;
    windowHeight(): any;
    numVisibleRows(): number;
    maxLines(): 4 | 8;
    maxChoiceWidth(): number;
    makeCommandList(): void;
    drawItem(index: any): void;
    isCancelEnabled(): boolean;
    needsCancelButton(): boolean;
    callOkHandler(): void;
    callCancelHandler(): void;
}
declare function Window_NumberInput(...args: any[]): void;
declare class Window_NumberInput {
    constructor(...args: any[]);
    constructor: typeof Window_NumberInput;
    initialize(): void;
    _number: any;
    _maxDigits: any;
    openness: number;
    _canRepeat: boolean;
    setMessageWindow(messageWindow: any): void;
    _messageWindow: any;
    start(): void;
    updatePlacement(): void;
    width: number;
    height: any;
    x: number;
    y: any;
    windowWidth(): number;
    windowHeight(): any;
    maxCols(): any;
    maxItems(): any;
    itemWidth(): number;
    itemRect(index: any): any;
    isScrollEnabled(): boolean;
    isHoverEnabled(): boolean;
    createButtons(): void;
    _buttons: any[];
    placeButtons(): void;
    totalButtonWidth(): any;
    buttonSpacing(): number;
    buttonY(): any;
    update(): void;
    processDigitChange(): void;
    changeDigit(up: any): void;
    isTouchOkEnabled(): boolean;
    isOkEnabled(): boolean;
    isCancelEnabled(): boolean;
    processOk(): void;
    drawItem(index: any): void;
    onButtonUp(): void;
    onButtonDown(): void;
    onButtonOk(): void;
}
declare function Window_EventItem(...args: any[]): void;
declare class Window_EventItem {
    constructor(...args: any[]);
    constructor: typeof Window_EventItem;
    initialize(rect: any): void;
    openness: number;
    setMessageWindow(messageWindow: any): void;
    _messageWindow: any;
    createCancelButton(): void;
    _cancelButton: Sprite_Button;
    start(): void;
    update(): void;
    updateCancelButton(): void;
    updatePlacement(): void;
    y: number;
    placeCancelButton(): void;
    includes(item: any): boolean;
    needsNumber(): any;
    isEnabled(): boolean;
    onOk(): void;
    onCancel(): void;
}
declare function Window_Message(...args: any[]): void;
declare class Window_Message {
    constructor(...args: any[]);
    constructor: typeof Window_Message;
    initialize(rect: any): void;
    openness: number;
    initMembers(): void;
    _background: any;
    _positionType: any;
    _waitCount: any;
    _faceBitmap: any;
    _textState: any;
    _goldWindow: any;
    _nameBoxWindow: any;
    _choiceListWindow: any;
    _numberInputWindow: any;
    _eventItemWindow: any;
    setGoldWindow(goldWindow: any): void;
    setNameBoxWindow(nameBoxWindow: any): void;
    setChoiceListWindow(choiceListWindow: any): void;
    setNumberInputWindow(numberInputWindow: any): void;
    setEventItemWindow(eventItemWindow: any): void;
    clearFlags(): void;
    _showFast: boolean;
    _lineShowFast: boolean;
    _pauseSkip: boolean;
    update(): void;
    checkToNotClose(): void;
    synchronizeNameBox(): void;
    canStart(): boolean;
    startMessage(): void;
    newLineX(textState: any): any;
    updatePlacement(): void;
    y: number;
    updateBackground(): void;
    terminateMessage(): void;
    updateWait(): boolean;
    updateLoading(): boolean;
    updateInput(): boolean;
    pause: boolean;
    isAnySubWindowActive(): any;
    updateMessage(): boolean;
    shouldBreakHere(textState: any): boolean;
    canBreakHere(textState: any): boolean;
    onEndOfText(): void;
    startInput(): boolean;
    isTriggered(): boolean;
    doesContinue(): boolean;
    areSettingsChanged(): boolean;
    updateShowFast(): void;
    newPage(textState: any): void;
    updateSpeakerName(): void;
    loadMessageFace(): void;
    drawMessageFace(): void;
    processControlCharacter(textState: any, c: any): void;
    processNewLine(textState: any): void;
    processNewPage(textState: any): void;
    isEndOfText(textState: any): boolean;
    needsNewPage(textState: any): boolean;
    processEscapeCharacter(code: any, textState: any): void;
    startWait(count: any): void;
    startPause(): void;
    isWaiting(): boolean;
}
declare function Window_ScrollText(...args: any[]): void;
declare class Window_ScrollText {
    constructor(...args: any[]);
    constructor: typeof Window_ScrollText;
    initialize(rect: any): void;
    opacity: number;
    _reservedRect: any;
    _text: any;
    _allTextHeight: any;
    update(): void;
    startMessage(): void;
    refresh(): void;
    updatePlacement(): void;
    contentsHeight(): number;
    updateMessage(): void;
    scrollSpeed(): number;
    isFastForward(): boolean;
    fastForwardRate(): number;
    terminateMessage(): void;
}
declare function Window_MapName(...args: any[]): void;
declare class Window_MapName {
    constructor(...args: any[]);
    constructor: typeof Window_MapName;
    initialize(rect: any): void;
    opacity: number;
    contentsOpacity: number;
    _showCount: number;
    update(): void;
    updateFadeIn(): void;
    updateFadeOut(): void;
    open(): void;
    close(): void;
    refresh(): void;
    drawBackground(x: any, y: any, width: any, height: any): void;
}
declare function Window_BattleLog(...args: any[]): void;
declare class Window_BattleLog {
    constructor(...args: any[]);
    constructor: typeof Window_BattleLog;
    initialize(rect: any): void;
    opacity: number;
    _lines: any[];
    _methods: any[];
    _waitCount: number;
    _waitMode: any;
    _baseLineStack: any[];
    _spriteset: any;
    setSpriteset(spriteset: any): void;
    maxLines(): number;
    numLines(): number;
    messageSpeed(): number;
    isBusy(): any;
    update(): void;
    updateWait(): boolean;
    updateWaitCount(): boolean;
    updateWaitMode(): boolean;
    setWaitMode(waitMode: any): void;
    callNextMethod(): void;
    isFastForward(): boolean;
    push(methodName: any, ...args: any[]): void;
    clear(): void;
    wait(): void;
    waitForEffect(): void;
    waitForMovement(): void;
    addText(text: any): void;
    pushBaseLine(): void;
    popBaseLine(): void;
    waitForNewLine(): void;
    popupDamage(target: any): void;
    performActionStart(subject: any, action: any): void;
    performAction(subject: any, action: any): void;
    performActionEnd(subject: any): void;
    performDamage(target: any): void;
    performMiss(target: any): void;
    performRecovery(target: any): void;
    performEvasion(target: any): void;
    performMagicEvasion(target: any): void;
    performCounter(target: any): void;
    performReflection(target: any): void;
    performSubstitute(substitute: any, target: any): void;
    performCollapse(target: any): void;
    showAnimation(subject: any, targets: any, animationId: any): void;
    showAttackAnimation(subject: any, targets: any): void;
    showActorAttackAnimation(subject: any, targets: any): void;
    showEnemyAttackAnimation(): void;
    showNormalAnimation(targets: any, animationId: any, mirror: any): void;
    refresh(): void;
    drawBackground(): void;
    backRect(): Rectangle;
    lineRect(index: any): Rectangle;
    backColor(): string;
    backPaintOpacity(): number;
    drawLineText(index: any): void;
    startTurn(): void;
    startAction(subject: any, action: any, targets: any): void;
    endAction(subject: any): void;
    displayCurrentState(subject: any): void;
    displayRegeneration(subject: any): void;
    displayAction(subject: any, item: any): void;
    displayItemMessage(fmt: any, subject: any, item: any): void;
    displayCounter(target: any): void;
    displayReflection(target: any): void;
    displaySubstitute(substitute: any, target: any): void;
    displayActionResults(subject: any, target: any): void;
    displayFailure(target: any): void;
    displayCritical(target: any): void;
    displayDamage(target: any): void;
    displayMiss(target: any): void;
    displayEvasion(target: any): void;
    displayHpDamage(target: any): void;
    displayMpDamage(target: any): void;
    displayTpDamage(target: any): void;
    displayAffectedStatus(target: any): void;
    displayAutoAffectedStatus(target: any): void;
    displayChangedStates(target: any): void;
    displayAddedStates(target: any): void;
    displayRemovedStates(target: any): void;
    displayChangedBuffs(target: any): void;
    displayBuffs(target: any, buffs: any, fmt: any): void;
    makeHpDamageText(target: any): any;
    makeMpDamageText(target: any): any;
    makeTpDamageText(target: any): any;
}
declare function Window_PartyCommand(...args: any[]): void;
declare class Window_PartyCommand {
    constructor(...args: any[]);
    constructor: typeof Window_PartyCommand;
    initialize(rect: any): void;
    openness: number;
    makeCommandList(): void;
    setup(): void;
}
declare function Window_ActorCommand(...args: any[]): void;
declare class Window_ActorCommand {
    constructor(...args: any[]);
    constructor: typeof Window_ActorCommand;
    initialize(rect: any): void;
    openness: number;
    _actor: any;
    makeCommandList(): void;
    addAttackCommand(): void;
    addSkillCommands(): void;
    addGuardCommand(): void;
    addItemCommand(): void;
    setup(actor: any): void;
    actor(): any;
    processOk(): void;
    selectLast(): void;
}
declare function Window_BattleStatus(...args: any[]): void;
declare class Window_BattleStatus {
    constructor(...args: any[]);
    constructor: typeof Window_BattleStatus;
    initialize(rect: any): void;
    frameVisible: boolean;
    openness: number;
    _bitmapsReady: number;
    extraHeight(): number;
    maxCols(): number;
    itemHeight(): any;
    maxItems(): any;
    rowSpacing(): number;
    updatePadding(): void;
    padding: number;
    actor(index: any): any;
    selectActor(actor: any): void;
    update(): void;
    preparePartyRefresh(): void;
    performPartyRefresh(): void;
    drawItem(index: any): void;
    drawItemImage(index: any): void;
    drawItemStatus(index: any): void;
    faceRect(index: any): any;
    nameX(rect: any): any;
    nameY(rect: any): number;
    stateIconX(rect: any): number;
    stateIconY(rect: any): any;
    basicGaugesX(rect: any): any;
    basicGaugesY(rect: any): number;
}
declare function Window_BattleActor(...args: any[]): void;
declare class Window_BattleActor {
    constructor(...args: any[]);
    constructor: typeof Window_BattleActor;
    initialize(rect: any): void;
    openness: number;
    show(): void;
    hide(): void;
    select(index: any): void;
    processTouch(): void;
}
declare function Window_BattleEnemy(...args: any[]): void;
declare class Window_BattleEnemy {
    constructor(...args: any[]);
    constructor: typeof Window_BattleEnemy;
    initialize(rect: any): void;
    _enemies: any;
    maxCols(): number;
    maxItems(): any;
    enemy(): any;
    enemyIndex(): any;
    drawItem(index: any): void;
    show(): void;
    hide(): void;
    refresh(): void;
    select(index: any): void;
    processTouch(): void;
}
declare function Window_BattleSkill(...args: any[]): void;
declare class Window_BattleSkill {
    constructor(...args: any[]);
    constructor: typeof Window_BattleSkill;
    initialize(rect: any): void;
    show(): void;
    hide(): void;
}
declare function Window_BattleItem(...args: any[]): void;
declare class Window_BattleItem {
    constructor(...args: any[]);
    constructor: typeof Window_BattleItem;
    initialize(rect: any): void;
    includes(item: any): any;
    show(): void;
    hide(): void;
}
declare function Window_TitleCommand(...args: any[]): void;
declare class Window_TitleCommand {
    constructor(...args: any[]);
    constructor: typeof Window_TitleCommand;
    initialize(rect: any): void;
    openness: number;
    makeCommandList(): void;
    isContinueEnabled(): any;
    processOk(): void;
    selectLast(): void;
}
declare namespace Window_TitleCommand {
    const _lastCommandSymbol_1: any;
    export { _lastCommandSymbol_1 as _lastCommandSymbol };
    export function initCommandPosition(): void;
}
declare function Window_GameEnd(...args: any[]): void;
declare class Window_GameEnd {
    constructor(...args: any[]);
    constructor: typeof Window_GameEnd;
    initialize(rect: any): void;
    openness: number;
    makeCommandList(): void;
}
declare function Window_DebugRange(...args: any[]): void;
declare class Window_DebugRange {
    constructor(...args: any[]);
    constructor: typeof Window_DebugRange;
    initialize(rect: any): void;
    _maxSwitches: number;
    _maxVariables: number;
    maxItems(): number;
    update(): void;
    mode(index: any): "switch" | "variable";
    topId(index: any): number;
    isSwitchMode(index: any): boolean;
    drawItem(index: any): void;
    isCancelTriggered(): any;
    processCancel(): void;
    setEditWindow(editWindow: any): void;
    _editWindow: any;
}
declare namespace Window_DebugRange {
    const lastTopRow: number;
    const lastIndex: number;
}
declare function Window_DebugEdit(...args: any[]): void;
declare class Window_DebugEdit {
    constructor(...args: any[]);
    constructor: typeof Window_DebugEdit;
    initialize(rect: any): void;
    _mode: any;
    _topId: any;
    maxItems(): number;
    drawItem(index: any): void;
    itemName(dataId: any): any;
    itemStatus(dataId: any): string;
    setMode(mode: any): void;
    setTopId(id: any): void;
    currentId(): any;
    update(): void;
    updateSwitch(): void;
    updateVariable(): void;
    deltaForVariable(): 0 | 1 | 10 | -1 | -10;
}
