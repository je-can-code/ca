declare function Game_Temp(...args: any[]): void;
declare class Game_Temp {
    constructor(...args: any[]);
    initialize(): void;
    _isPlaytest: boolean;
    _destinationX: any;
    _destinationY: any;
    _touchTarget: any;
    _touchState: any;
    _needsBattleRefresh: boolean;
    _commonEventQueue: any[];
    _animationQueue: any[];
    _balloonQueue: any[];
    _lastActionData: number[];
    isPlaytest(): boolean;
    setDestination(x: any, y: any): void;
    clearDestination(): void;
    isDestinationValid(): boolean;
    destinationX(): any;
    destinationY(): any;
    setTouchState(target: any, state: any): void;
    clearTouchState(): void;
    touchTarget(): any;
    touchState(): any;
    requestBattleRefresh(): void;
    clearBattleRefreshRequest(): void;
    isBattleRefreshRequested(): boolean;
    reserveCommonEvent(commonEventId: any): void;
    retrieveCommonEvent(): any;
    clearCommonEventReservation(): void;
    isCommonEventReserved(): boolean;
    requestAnimation(targets: any, animationId: any, mirror?: boolean): void;
    retrieveAnimation(): any;
    requestBalloon(target: any, balloonId: any): void;
    retrieveBalloon(): any;
    lastActionData(type: any): number;
    setLastActionData(type: any, value: any): void;
    setLastUsedSkillId(skillID: any): void;
    setLastUsedItemId(itemID: any): void;
    setLastSubjectActorId(actorID: any): void;
    setLastSubjectEnemyIndex(enemyIndex: any): void;
    setLastTargetActorId(actorID: any): void;
    setLastTargetEnemyIndex(enemyIndex: any): void;
}
declare function Game_System(...args: any[]): void;
declare class Game_System {
    constructor(...args: any[]);
    initialize(): void;
    _saveEnabled: boolean;
    _menuEnabled: boolean;
    _encounterEnabled: boolean;
    _formationEnabled: boolean;
    _battleCount: number;
    _winCount: number;
    _escapeCount: number;
    _saveCount: number;
    _versionId: any;
    _savefileId: any;
    _framesOnSave: any;
    _bgmOnSave: any;
    _bgsOnSave: any;
    _windowTone: any;
    _battleBgm: any;
    _victoryMe: any;
    _defeatMe: any;
    _savedBgm: any;
    _walkingBgm: any;
    isJapanese(): any;
    isChinese(): any;
    isKorean(): any;
    isCJK(): any;
    isRussian(): any;
    isSideView(): any;
    isAutosaveEnabled(): any;
    isSaveEnabled(): boolean;
    disableSave(): void;
    enableSave(): void;
    isMenuEnabled(): boolean;
    disableMenu(): void;
    enableMenu(): void;
    isEncounterEnabled(): boolean;
    disableEncounter(): void;
    enableEncounter(): void;
    isFormationEnabled(): boolean;
    disableFormation(): void;
    enableFormation(): void;
    battleCount(): number;
    winCount(): number;
    escapeCount(): number;
    saveCount(): number;
    versionId(): any;
    savefileId(): any;
    setSavefileId(savefileId: any): void;
    windowTone(): any;
    setWindowTone(value: any): void;
    battleBgm(): any;
    setBattleBgm(value: any): void;
    victoryMe(): any;
    setVictoryMe(value: any): void;
    defeatMe(): any;
    setDefeatMe(value: any): void;
    onBattleStart(): void;
    onBattleWin(): void;
    onBattleEscape(): void;
    onBeforeSave(): void;
    onAfterLoad(): void;
    playtime(): number;
    playtimeText(): string;
    saveBgm(): void;
    replayBgm(): void;
    saveWalkingBgm(): void;
    replayWalkingBgm(): void;
    saveWalkingBgm2(): void;
    mainFontFace(): string;
    numberFontFace(): string;
    mainFontSize(): any;
    windowPadding(): number;
    windowOpacity(): any;
}
declare function Game_Timer(...args: any[]): void;
declare class Game_Timer {
    constructor(...args: any[]);
    initialize(): void;
    _frames: any;
    _working: boolean;
    update(sceneActive: any): void;
    start(count: any): void;
    stop(): void;
    isWorking(): boolean;
    seconds(): number;
    frames(): any;
    onExpire(): void;
}
declare function Game_Message(...args: any[]): void;
declare class Game_Message {
    constructor(...args: any[]);
    initialize(): void;
    clear(): void;
    _texts: any[];
    _choices: any;
    _speakerName: any;
    _faceName: any;
    _faceIndex: any;
    _background: any;
    _positionType: any;
    _choiceDefaultType: any;
    _choiceCancelType: any;
    _choiceBackground: any;
    _choicePositionType: any;
    _numInputVariableId: any;
    _numInputMaxDigits: any;
    _itemChoiceVariableId: any;
    _itemChoiceItypeId: any;
    _scrollMode: boolean;
    _scrollSpeed: any;
    _scrollNoFast: any;
    _choiceCallback: any;
    choices(): any;
    speakerName(): any;
    faceName(): any;
    faceIndex(): any;
    background(): any;
    positionType(): any;
    choiceDefaultType(): any;
    choiceCancelType(): any;
    choiceBackground(): any;
    choicePositionType(): any;
    numInputVariableId(): any;
    numInputMaxDigits(): any;
    itemChoiceVariableId(): any;
    itemChoiceItypeId(): any;
    scrollMode(): boolean;
    scrollSpeed(): any;
    scrollNoFast(): any;
    add(text: any): void;
    setSpeakerName(speakerName: any): void;
    setFaceImage(faceName: any, faceIndex: any): void;
    setBackground(background: any): void;
    setPositionType(positionType: any): void;
    setChoices(choices: any, defaultType: any, cancelType: any): void;
    setChoiceBackground(background: any): void;
    setChoicePositionType(positionType: any): void;
    setNumberInput(variableId: any, maxDigits: any): void;
    setItemChoice(variableId: any, itemType: any): void;
    setScroll(speed: any, noFast: any): void;
    setChoiceCallback(callback: any): void;
    onChoice(n: any): void;
    hasText(): boolean;
    isChoice(): boolean;
    isNumberInput(): boolean;
    isItemChoice(): boolean;
    isBusy(): boolean;
    newPage(): void;
    allText(): string;
    isRTL(): boolean;
}
declare function Game_Switches(...args: any[]): void;
declare class Game_Switches {
    constructor(...args: any[]);
    initialize(): void;
    clear(): void;
    _data: any[];
    value(switchId: any): boolean;
    setValue(switchId: any, value: any): void;
    onChange(): void;
}
declare function Game_Variables(...args: any[]): void;
declare class Game_Variables {
    constructor(...args: any[]);
    initialize(): void;
    clear(): void;
    _data: any[];
    value(variableId: any): any;
    setValue(variableId: any, value: any): void;
    onChange(): void;
}
declare function Game_SelfSwitches(...args: any[]): void;
declare class Game_SelfSwitches {
    constructor(...args: any[]);
    initialize(): void;
    clear(): void;
    _data: {};
    value(key: any): boolean;
    setValue(key: any, value: any): void;
    onChange(): void;
}
declare function Game_Screen(...args: any[]): void;
declare class Game_Screen {
    constructor(...args: any[]);
    initialize(): void;
    clear(): void;
    onBattleStart(): void;
    brightness(): any;
    tone(): any;
    flashColor(): any;
    shake(): number;
    zoomX(): any;
    zoomY(): any;
    zoomScale(): any;
    weatherType(): any;
    weatherPower(): any;
    picture(pictureId: any): any;
    realPictureId(pictureId: any): any;
    clearFade(): void;
    _brightness: any;
    _fadeOutDuration: any;
    _fadeInDuration: any;
    clearTone(): void;
    _tone: any;
    _toneTarget: any;
    _toneDuration: any;
    clearFlash(): void;
    _flashColor: any;
    _flashDuration: any;
    clearShake(): void;
    _shakePower: any;
    _shakeSpeed: any;
    _shakeDuration: any;
    _shakeDirection: number;
    _shake: number;
    clearZoom(): void;
    _zoomX: any;
    _zoomY: any;
    _zoomScale: any;
    _zoomScaleTarget: any;
    _zoomDuration: any;
    clearWeather(): void;
    _weatherType: any;
    _weatherPower: any;
    _weatherPowerTarget: any;
    _weatherDuration: any;
    clearPictures(): void;
    _pictures: any;
    eraseBattlePictures(): void;
    maxPictures(): number;
    startFadeOut(duration: any): void;
    startFadeIn(duration: any): void;
    startTint(tone: any, duration: any): void;
    startFlash(color: any, duration: any): void;
    startShake(power: any, speed: any, duration: any): void;
    startZoom(x: any, y: any, scale: any, duration: any): void;
    setZoom(x: any, y: any, scale: any): void;
    changeWeather(type: any, power: any, duration: any): void;
    update(): void;
    updateFadeOut(): void;
    updateFadeIn(): void;
    updateTone(): void;
    updateFlash(): void;
    updateShake(): void;
    updateZoom(): void;
    updateWeather(): void;
    updatePictures(): void;
    startFlashForDamage(): void;
    showPicture(pictureId: any, name: any, origin: any, x: any, y: any, scaleX: any, scaleY: any, opacity: any, blendMode: any): void;
    movePicture(pictureId: any, origin: any, x: any, y: any, scaleX: any, scaleY: any, opacity: any, blendMode: any, duration: any, easingType: any): void;
    rotatePicture(pictureId: any, speed: any): void;
    tintPicture(pictureId: any, tone: any, duration: any): void;
    erasePicture(pictureId: any): void;
}
declare function Game_Picture(...args: any[]): void;
declare class Game_Picture {
    constructor(...args: any[]);
    initialize(): void;
    name(): any;
    origin(): any;
    x(): any;
    y(): any;
    scaleX(): any;
    scaleY(): any;
    opacity(): any;
    blendMode(): any;
    tone(): any;
    angle(): number;
    initBasic(): void;
    _name: any;
    _origin: any;
    _x: any;
    _y: any;
    _scaleX: any;
    _scaleY: any;
    _opacity: any;
    _blendMode: any;
    initTarget(): void;
    _targetX: any;
    _targetY: any;
    _targetScaleX: any;
    _targetScaleY: any;
    _targetOpacity: any;
    _duration: any;
    _wholeDuration: any;
    _easingType: any;
    _easingExponent: number;
    initTone(): void;
    _tone: any;
    _toneTarget: any;
    _toneDuration: any;
    initRotation(): void;
    _angle: number;
    _rotationSpeed: any;
    show(name: any, origin: any, x: any, y: any, scaleX: any, scaleY: any, opacity: any, blendMode: any): void;
    move(origin: any, x: any, y: any, scaleX: any, scaleY: any, opacity: any, blendMode: any, duration: any, easingType: any): void;
    rotate(speed: any): void;
    tint(tone: any, duration: any): void;
    update(): void;
    updateMove(): void;
    updateTone(): void;
    updateRotation(): void;
    applyEasing(current: any, target: any): number;
    calcEasing(t: any): any;
    easeIn(t: any, exponent: any): number;
    easeOut(t: any, exponent: any): number;
    easeInOut(t: any, exponent: any): number;
}
declare function Game_Item(...args: any[]): void;
declare class Game_Item {
    constructor(...args: any[]);
    initialize(item: any): void;
    _dataClass: string;
    _itemId: any;
    isSkill(): boolean;
    isItem(): boolean;
    isUsableItem(): boolean;
    isWeapon(): boolean;
    isArmor(): boolean;
    isEquipItem(): boolean;
    isNull(): boolean;
    itemId(): any;
    object(): any;
    setObject(item: any): void;
    setEquip(isWeapon: any, itemId: any): void;
}
declare function Game_Action(...args: any[]): void;
declare class Game_Action {
    constructor(...args: any[]);
    initialize(subject: any, forcing: any): void;
    _subjectActorId: any;
    _subjectEnemyIndex: any;
    _forcing: any;
    clear(): void;
    _item: Game_Item;
    _targetIndex: any;
    setSubject(subject: any): void;
    subject(): any;
    friendsUnit(): any;
    opponentsUnit(): any;
    setEnemyAction(action: any): void;
    setAttack(): void;
    setGuard(): void;
    setSkill(skillId: any): void;
    setItem(itemId: any): void;
    setItemObject(object: any): void;
    setTarget(targetIndex: any): void;
    item(): any;
    isSkill(): boolean;
    isItem(): boolean;
    numRepeats(): number;
    checkItemScope(list: any): any;
    isForOpponent(): any;
    isForFriend(): any;
    isForEveryone(): any;
    isForAliveFriend(): any;
    isForDeadFriend(): any;
    isForUser(): any;
    isForOne(): any;
    isForRandom(): any;
    isForAll(): any;
    needsSelection(): any;
    numTargets(): number;
    checkDamageType(list: any): any;
    isHpEffect(): any;
    isMpEffect(): any;
    isDamage(): any;
    isRecover(): any;
    isDrain(): any;
    isHpRecover(): any;
    isMpRecover(): any;
    isCertainHit(): boolean;
    isPhysical(): boolean;
    isMagical(): boolean;
    isAttack(): boolean;
    isGuard(): boolean;
    isMagicSkill(): any;
    decideRandomTarget(): void;
    setConfusion(): void;
    prepare(): void;
    isValid(): any;
    speed(): any;
    makeTargets(): any[];
    repeatTargets(targets: any): any[];
    confusionTarget(): any;
    targetsForEveryone(): any;
    targetsForOpponents(): any;
    targetsForFriends(): any;
    randomTargets(unit: any): any[];
    targetsForDead(unit: any): any;
    targetsForAlive(unit: any): any;
    targetsForDeadAndAlive(unit: any): any;
    evaluate(): number;
    itemTargetCandidates(): any;
    evaluateWithTarget(target: any): number;
    testApply(target: any): any;
    testLifeAndDeath(target: any): any;
    hasItemAnyValidEffects(target: any): any;
    testItemEffect(target: any, effect: any): any;
    itemCnt(target: any): any;
    itemMrf(target: any): any;
    itemHit(): number;
    itemEva(target: any): any;
    itemCri(target: any): number;
    apply(target: any): void;
    makeDamageValue(target: any, critical: any): number;
    evalDamageFormula(target: any): number;
    calcElementRate(target: any): any;
    elementsMaxRate(target: any, elements: any): number;
    applyCritical(damage: any): number;
    applyVariance(damage: any, variance: any): any;
    applyGuard(damage: any, target: any): number;
    executeDamage(target: any, value: any): void;
    executeHpDamage(target: any, value: any): void;
    executeMpDamage(target: any, value: any): void;
    gainDrainedHp(value: any): void;
    gainDrainedMp(value: any): void;
    applyItemEffect(target: any, effect: any): void;
    itemEffectRecoverHp(target: any, effect: any): void;
    itemEffectRecoverMp(target: any, effect: any): void;
    itemEffectGainTp(target: any, effect: any): void;
    itemEffectAddState(target: any, effect: any): void;
    itemEffectAddAttackState(target: any, effect: any): void;
    itemEffectAddNormalState(target: any, effect: any): void;
    itemEffectRemoveState(target: any, effect: any): void;
    itemEffectAddBuff(target: any, effect: any): void;
    itemEffectAddDebuff(target: any, effect: any): void;
    itemEffectRemoveBuff(target: any, effect: any): void;
    itemEffectRemoveDebuff(target: any, effect: any): void;
    itemEffectSpecial(target: any, effect: any): void;
    itemEffectGrow(target: any, effect: any): void;
    itemEffectLearnSkill(target: any, effect: any): void;
    itemEffectCommonEvent(): void;
    makeSuccess(target: any): void;
    applyItemUserEffect(): void;
    lukEffectRate(target: any): number;
    applyGlobal(): void;
    updateLastUsed(): void;
    updateLastSubject(): void;
    updateLastTarget(target: any): void;
}
declare namespace Game_Action {
    const EFFECT_RECOVER_HP: number;
    const EFFECT_RECOVER_MP: number;
    const EFFECT_GAIN_TP: number;
    const EFFECT_ADD_STATE: number;
    const EFFECT_REMOVE_STATE: number;
    const EFFECT_ADD_BUFF: number;
    const EFFECT_ADD_DEBUFF: number;
    const EFFECT_REMOVE_BUFF: number;
    const EFFECT_REMOVE_DEBUFF: number;
    const EFFECT_SPECIAL: number;
    const EFFECT_GROW: number;
    const EFFECT_LEARN_SKILL: number;
    const EFFECT_COMMON_EVENT: number;
    const SPECIAL_EFFECT_ESCAPE: number;
    const HITTYPE_CERTAIN: number;
    const HITTYPE_PHYSICAL: number;
    const HITTYPE_MAGICAL: number;
}
declare function Game_ActionResult(...args: any[]): void;
declare class Game_ActionResult {
    constructor(...args: any[]);
    initialize(): void;
    clear(): void;
    used: boolean;
    missed: boolean;
    evaded: boolean;
    physical: boolean;
    drain: boolean;
    critical: boolean;
    success: boolean;
    hpAffected: boolean;
    hpDamage: number;
    mpDamage: number;
    tpDamage: number;
    addedStates: any[];
    removedStates: any[];
    addedBuffs: any[];
    addedDebuffs: any[];
    removedBuffs: any[];
    addedStateObjects(): any[];
    removedStateObjects(): any[];
    isStatusAffected(): boolean;
    isHit(): boolean;
    isStateAdded(stateId: any): any;
    pushAddedState(stateId: any): void;
    isStateRemoved(stateId: any): any;
    pushRemovedState(stateId: any): void;
    isBuffAdded(paramId: any): any;
    pushAddedBuff(paramId: any): void;
    isDebuffAdded(paramId: any): any;
    pushAddedDebuff(paramId: any): void;
    isBuffRemoved(paramId: any): any;
    pushRemovedBuff(paramId: any): void;
}
declare function Game_BattlerBase(...args: any[]): void;
declare class Game_BattlerBase {
    constructor(...args: any[]);
    initialize(): void;
    initMembers(): void;
    _hp: any;
    _mp: any;
    _tp: any;
    _hidden: boolean;
    clearParamPlus(): void;
    _paramPlus: number[];
    clearStates(): void;
    _states: any[];
    _stateTurns: {};
    eraseState(stateId: any): void;
    isStateAffected(stateId: any): any;
    isDeathStateAffected(): any;
    deathStateId(): number;
    resetStateCounts(stateId: any): void;
    isStateExpired(stateId: any): boolean;
    updateStateTurns(): void;
    clearBuffs(): void;
    _buffs: number[];
    _buffTurns: number[];
    eraseBuff(paramId: any): void;
    buffLength(): number;
    buff(paramId: any): number;
    isBuffAffected(paramId: any): boolean;
    isDebuffAffected(paramId: any): boolean;
    isBuffOrDebuffAffected(paramId: any): boolean;
    isMaxBuffAffected(paramId: any): boolean;
    isMaxDebuffAffected(paramId: any): boolean;
    increaseBuff(paramId: any): void;
    decreaseBuff(paramId: any): void;
    overwriteBuffTurns(paramId: any, turns: any): void;
    isBuffExpired(paramId: any): boolean;
    updateBuffTurns(): void;
    die(): void;
    revive(): void;
    states(): any[];
    stateIcons(): any[];
    buffIcons(): any[];
    buffIconIndex(buffLevel: any, paramId: any): any;
    allIcons(): any[];
    traitObjects(): any[];
    allTraits(): any;
    traits(code: any): any;
    traitsWithId(code: any, id: any): any;
    traitsPi(code: any, id: any): any;
    traitsSum(code: any, id: any): any;
    traitsSumAll(code: any): any;
    traitsSet(code: any): any;
    paramBase(): number;
    paramPlus(paramId: any): number;
    paramBasePlus(paramId: any): number;
    paramMin(paramId: any): 0 | 1;
    paramMax(): number;
    paramRate(paramId: any): any;
    paramBuffRate(paramId: any): number;
    param(paramId: any): number;
    xparam(xparamId: any): any;
    sparam(sparamId: any): any;
    elementRate(elementId: any): any;
    debuffRate(paramId: any): any;
    stateRate(stateId: any): any;
    stateResistSet(): any;
    isStateResist(stateId: any): any;
    attackElements(): any;
    attackStates(): any;
    attackStatesRate(stateId: any): any;
    attackSpeed(): any;
    attackTimesAdd(): number;
    attackSkillId(): number;
    addedSkillTypes(): any;
    isSkillTypeSealed(stypeId: any): any;
    addedSkills(): any;
    isSkillSealed(skillId: any): any;
    isEquipWtypeOk(wtypeId: any): any;
    isEquipAtypeOk(atypeId: any): any;
    isEquipTypeLocked(etypeId: any): any;
    isEquipTypeSealed(etypeId: any): any;
    slotType(): number;
    isDualWield(): boolean;
    actionPlusSet(): any;
    specialFlag(flagId: any): any;
    collapseType(): number;
    partyAbility(abilityId: any): any;
    isAutoBattle(): any;
    isGuard(): boolean;
    isSubstitute(): boolean;
    isPreserveTp(): any;
    addParam(paramId: any, value: any): void;
    setHp(hp: any): void;
    setMp(mp: any): void;
    setTp(tp: any): void;
    maxTp(): number;
    refresh(): void;
    recoverAll(): void;
    hpRate(): number;
    mpRate(): number;
    tpRate(): number;
    hide(): void;
    appear(): void;
    isHidden(): boolean;
    isAppeared(): boolean;
    isDead(): any;
    isAlive(): boolean;
    isDying(): boolean;
    isRestricted(): boolean;
    canInput(): boolean;
    canMove(): boolean;
    isConfused(): boolean;
    confusionLevel(): number;
    isActor(): boolean;
    isEnemy(): boolean;
    sortStates(): void;
    restriction(): number;
    addNewState(stateId: any): void;
    onRestrict(): void;
    mostImportantStateText(): any;
    stateMotionIndex(): any;
    stateOverlayIndex(): any;
    isSkillWtypeOk(): boolean;
    skillMpCost(skill: any): number;
    skillTpCost(skill: any): any;
    canPaySkillCost(skill: any): boolean;
    paySkillCost(skill: any): void;
    isOccasionOk(item: any): boolean;
    meetsUsableItemConditions(item: any): boolean;
    meetsSkillConditions(skill: any): boolean;
    meetsItemConditions(item: any): any;
    canUse(item: any): any;
    canEquip(item: any): boolean;
    canEquipWeapon(item: any): boolean;
    canEquipArmor(item: any): boolean;
    guardSkillId(): number;
    canAttack(): any;
    canGuard(): any;
}
declare namespace Game_BattlerBase {
    const TRAIT_ELEMENT_RATE: number;
    const TRAIT_DEBUFF_RATE: number;
    const TRAIT_STATE_RATE: number;
    const TRAIT_STATE_RESIST: number;
    const TRAIT_PARAM: number;
    const TRAIT_XPARAM: number;
    const TRAIT_SPARAM: number;
    const TRAIT_ATTACK_ELEMENT: number;
    const TRAIT_ATTACK_STATE: number;
    const TRAIT_ATTACK_SPEED: number;
    const TRAIT_ATTACK_TIMES: number;
    const TRAIT_ATTACK_SKILL: number;
    const TRAIT_STYPE_ADD: number;
    const TRAIT_STYPE_SEAL: number;
    const TRAIT_SKILL_ADD: number;
    const TRAIT_SKILL_SEAL: number;
    const TRAIT_EQUIP_WTYPE: number;
    const TRAIT_EQUIP_ATYPE: number;
    const TRAIT_EQUIP_LOCK: number;
    const TRAIT_EQUIP_SEAL: number;
    const TRAIT_SLOT_TYPE: number;
    const TRAIT_ACTION_PLUS: number;
    const TRAIT_SPECIAL_FLAG: number;
    const TRAIT_COLLAPSE_TYPE: number;
    const TRAIT_PARTY_ABILITY: number;
    const FLAG_ID_AUTO_BATTLE: number;
    const FLAG_ID_GUARD: number;
    const FLAG_ID_SUBSTITUTE: number;
    const FLAG_ID_PRESERVE_TP: number;
    const ICON_BUFF_START: number;
    const ICON_DEBUFF_START: number;
}
declare function Game_Battler(...args: any[]): void;
declare class Game_Battler {
    constructor(...args: any[]);
    constructor: typeof Game_Battler;
    initialize(): void;
    initMembers(): void;
    _actions: any[];
    _speed: number;
    _result: Game_ActionResult;
    _actionState: any;
    _lastTargetIndex: any;
    _damagePopup: boolean;
    _effectType: any;
    _motionType: any;
    _weaponImageId: any;
    _motionRefresh: boolean;
    _selected: boolean;
    _tpbState: string;
    _tpbChargeTime: number;
    _tpbCastTime: number;
    _tpbIdleTime: number;
    _tpbTurnCount: number;
    _tpbTurnEnd: boolean;
    clearDamagePopup(): void;
    clearWeaponAnimation(): void;
    clearEffect(): void;
    clearMotion(): void;
    requestEffect(effectType: any): void;
    requestMotion(motionType: any): void;
    requestMotionRefresh(): void;
    cancelMotionRefresh(): void;
    select(): void;
    deselect(): void;
    isDamagePopupRequested(): boolean;
    isEffectRequested(): boolean;
    isMotionRequested(): boolean;
    isWeaponAnimationRequested(): boolean;
    isMotionRefreshRequested(): boolean;
    isSelected(): boolean;
    effectType(): any;
    motionType(): any;
    weaponImageId(): any;
    startDamagePopup(): void;
    shouldPopupDamage(): boolean;
    startWeaponAnimation(weaponImageId: any): void;
    action(index: any): any;
    setAction(index: any, action: any): void;
    numActions(): number;
    clearActions(): void;
    result(): Game_ActionResult;
    clearResult(): void;
    clearTpbChargeTime(): void;
    applyTpbPenalty(): void;
    initTpbChargeTime(advantageous: any): void;
    tpbChargeTime(): number;
    startTpbCasting(): void;
    startTpbAction(): void;
    isTpbCharged(): boolean;
    isTpbReady(): boolean;
    isTpbTimeout(): boolean;
    updateTpb(): void;
    updateTpbChargeTime(): void;
    updateTpbCastTime(): void;
    updateTpbAutoBattle(): void;
    updateTpbIdleTime(): void;
    tpbAcceleration(): number;
    tpbRelativeSpeed(): number;
    tpbSpeed(): number;
    tpbBaseSpeed(): number;
    tpbRequiredCastTime(): number;
    onTpbCharged(): void;
    shouldDelayTpbCharge(): any;
    finishTpbCharge(): void;
    isTpbTurnEnd(): boolean;
    initTpbTurn(): void;
    startTpbTurn(): void;
    makeTpbActions(): void;
    onTpbTimeout(): void;
    turnCount(): any;
    canInput(): any;
    refresh(): void;
    addState(stateId: any): void;
    isStateAddable(stateId: any): boolean;
    isStateRestrict(stateId: any): any;
    onRestrict(): void;
    removeState(stateId: any): void;
    escape(): void;
    addBuff(paramId: any, turns: any): void;
    addDebuff(paramId: any, turns: any): void;
    removeBuff(paramId: any): void;
    removeBattleStates(): void;
    removeAllBuffs(): void;
    removeStatesAuto(timing: any): void;
    removeBuffsAuto(): void;
    removeStatesByDamage(): void;
    makeActionTimes(): any;
    makeActions(): void;
    speed(): number;
    makeSpeed(): void;
    currentAction(): any;
    removeCurrentAction(): void;
    setLastTarget(target: any): void;
    forceAction(skillId: any, targetIndex: any): void;
    useItem(item: any): void;
    consumeItem(item: any): void;
    gainHp(value: any): void;
    gainMp(value: any): void;
    gainTp(value: any): void;
    gainSilentTp(value: any): void;
    initTp(): void;
    clearTp(): void;
    chargeTpByDamage(damageRate: any): void;
    regenerateHp(): void;
    maxSlipDamage(): any;
    regenerateMp(): void;
    regenerateTp(): void;
    regenerateAll(): void;
    onBattleStart(advantageous: any): void;
    onAllActionsEnd(): void;
    onTurnEnd(): void;
    onBattleEnd(): void;
    onDamage(value: any): void;
    setActionState(actionState: any): void;
    isUndecided(): boolean;
    isInputting(): boolean;
    isWaiting(): boolean;
    isActing(): boolean;
    isChanting(): boolean;
    isGuardWaiting(): boolean;
    performActionStart(action: any): void;
    performAction(): void;
    performActionEnd(): void;
    performDamage(): void;
    performMiss(): void;
    performRecovery(): void;
    performEvasion(): void;
    performMagicEvasion(): void;
    performCounter(): void;
    performReflection(): void;
    performSubstitute(): void;
    performCollapse(): void;
}
declare function Game_Actor(...args: any[]): void;
declare class Game_Actor {
    constructor(...args: any[]);
    constructor: typeof Game_Actor;
    get level(): any;
    initialize(actorId: any): void;
    initMembers(): void;
    _actorId: any;
    _name: any;
    _nickname: any;
    _classId: any;
    _level: any;
    _characterName: any;
    _characterIndex: any;
    _faceName: any;
    _faceIndex: any;
    _battlerName: any;
    _exp: {};
    _skills: any[];
    _equips: any[];
    _actionInputIndex: number;
    _lastMenuSkill: Game_Item;
    _lastBattleSkill: Game_Item;
    _lastCommandSymbol: any;
    setup(actorId: any): void;
    _profile: any;
    actorId(): any;
    actor(): any;
    name(): any;
    setName(name: any): void;
    nickname(): any;
    setNickname(nickname: any): void;
    profile(): any;
    setProfile(profile: any): void;
    characterName(): any;
    characterIndex(): any;
    faceName(): any;
    faceIndex(): any;
    battlerName(): any;
    clearStates(): void;
    _stateSteps: {};
    eraseState(stateId: any): void;
    resetStateCounts(stateId: any): void;
    initImages(): void;
    expForLevel(level: any): number;
    initExp(): void;
    currentExp(): any;
    currentLevelExp(): number;
    nextLevelExp(): number;
    nextRequiredExp(): number;
    maxLevel(): any;
    isMaxLevel(): boolean;
    initSkills(): void;
    initEquips(equips: any): void;
    equipSlots(): number[];
    equips(): any[];
    weapons(): any[];
    armors(): any[];
    hasWeapon(weapon: any): any;
    hasArmor(armor: any): any;
    isEquipChangeOk(slotId: any): boolean;
    changeEquip(slotId: any, item: any): void;
    forceChangeEquip(slotId: any, item: any): void;
    tradeItemWithParty(newItem: any, oldItem: any): boolean;
    changeEquipById(etypeId: any, itemId: any): void;
    isEquipped(item: any): any;
    discardEquip(item: any): void;
    releaseUnequippableItems(forcing: any): void;
    clearEquipments(): void;
    optimizeEquipments(): void;
    bestEquipItem(slotId: any): any;
    calcEquipItemPerformance(item: any): any;
    isSkillWtypeOk(skill: any): boolean;
    isWtypeEquipped(wtypeId: any): boolean;
    refresh(): void;
    hide(): void;
    isActor(): boolean;
    friendsUnit(): any;
    opponentsUnit(): any;
    index(): any;
    isBattleMember(): any;
    isFormationChangeOk(): boolean;
    currentClass(): any;
    isClass(gameClass: any): boolean;
    skillTypes(): any;
    skills(): any[];
    usableSkills(): any[];
    traitObjects(): any;
    attackElements(): any;
    hasNoWeapons(): boolean;
    bareHandsElementId(): number;
    paramBase(paramId: any): any;
    paramPlus(paramId: any): any;
    attackAnimationId1(): any;
    attackAnimationId2(): any;
    bareHandsAnimationId(): number;
    changeExp(exp: any, show: any): void;
    levelUp(): void;
    levelDown(): void;
    findNewSkills(lastSkills: any): any[];
    displayLevelUp(newSkills: any): void;
    gainExp(exp: any): void;
    finalExpRate(): number;
    benchMembersExpRate(): 0 | 1;
    shouldDisplayLevelUp(): boolean;
    changeLevel(level: any, show: any): void;
    learnSkill(skillId: any): void;
    forgetSkill(skillId: any): void;
    isLearnedSkill(skillId: any): any;
    hasSkill(skillId: any): any;
    changeClass(classId: any, keepExp: any): void;
    setCharacterImage(characterName: any, characterIndex: any): void;
    setFaceImage(faceName: any, faceIndex: any): void;
    setBattlerImage(battlerName: any): void;
    isSpriteVisible(): any;
    performActionStart(action: any): void;
    performAction(action: any): void;
    performActionEnd(): void;
    performAttack(): void;
    performDamage(): void;
    performEvasion(): void;
    performMagicEvasion(): void;
    performCounter(): void;
    performCollapse(): void;
    performVictory(): void;
    performEscape(): void;
    makeActionList(): Game_Action[];
    makeAutoBattleActions(): void;
    makeConfusionActions(): void;
    makeActions(): void;
    onPlayerWalk(): void;
    updateStateSteps(state: any): void;
    showAddedStates(): void;
    showRemovedStates(): void;
    stepsForTurn(): number;
    turnEndOnMap(): void;
    checkFloorEffect(): void;
    executeFloorDamage(): void;
    basicFloorDamage(): number;
    maxFloorDamage(): any;
    performMapDamage(): void;
    clearActions(): void;
    inputtingAction(): any;
    selectNextCommand(): boolean;
    selectPreviousCommand(): boolean;
    lastSkill(): any;
    lastMenuSkill(): any;
    setLastMenuSkill(skill: any): void;
    lastBattleSkill(): any;
    setLastBattleSkill(skill: any): void;
    lastCommandSymbol(): any;
    setLastCommandSymbol(symbol: any): void;
    testEscape(item: any): any;
    meetsUsableItemConditions(item: any): any;
    onEscapeFailure(): void;
}
declare function Game_Enemy(...args: any[]): void;
declare class Game_Enemy {
    constructor(...args: any[]);
    constructor: typeof Game_Enemy;
    initialize(enemyId: any, x: any, y: any): void;
    initMembers(): void;
    _enemyId: any;
    _letter: any;
    _plural: any;
    _screenX: any;
    _screenY: any;
    setup(enemyId: any, x: any, y: any): void;
    isEnemy(): boolean;
    friendsUnit(): any;
    opponentsUnit(): any;
    index(): any;
    isBattleMember(): boolean;
    enemyId(): any;
    enemy(): any;
    traitObjects(): any;
    paramBase(paramId: any): any;
    exp(): any;
    gold(): any;
    makeDropItems(): any;
    dropItemRate(): 2 | 1;
    itemObject(kind: any, dataId: any): any;
    isSpriteVisible(): boolean;
    screenX(): any;
    screenY(): any;
    battlerName(): any;
    battlerHue(): any;
    originalName(): any;
    name(): any;
    isLetterEmpty(): boolean;
    setLetter(letter: any): void;
    setPlural(plural: any): void;
    performActionStart(action: any): void;
    performAction(action: any): void;
    performActionEnd(): void;
    performDamage(): void;
    performCollapse(): void;
    transform(enemyId: any): void;
    meetsCondition(action: any): any;
    meetsTurnCondition(param1: any, param2: any): boolean;
    meetsHpCondition(param1: any, param2: any): boolean;
    meetsMpCondition(param1: any, param2: any): boolean;
    meetsStateCondition(param: any): any;
    meetsPartyLevelCondition(param: any): boolean;
    meetsSwitchCondition(param: any): any;
    isActionValid(action: any): any;
    selectAction(actionList: any, ratingZero: any): any;
    selectAllActions(actionList: any): void;
    makeActions(): void;
}
declare function Game_Actors(...args: any[]): void;
declare class Game_Actors {
    constructor(...args: any[]);
    initialize(): void;
    _data: any[];
    actor(actorId: any): any;
}
declare function Game_Unit(...args: any[]): void;
declare class Game_Unit {
    constructor(...args: any[]);
    initialize(): void;
    _inBattle: boolean;
    inBattle(): boolean;
    members(): any[];
    aliveMembers(): any[];
    deadMembers(): any[];
    movableMembers(): any[];
    clearActions(): void;
    agility(): number;
    tgrSum(): any;
    randomTarget(): any;
    randomDeadTarget(): any;
    smoothTarget(index: any): any;
    smoothDeadTarget(index: any): any;
    clearResults(): void;
    onBattleStart(advantageous: any): void;
    onBattleEnd(): void;
    makeActions(): void;
    select(activeMember: any): void;
    isAllDead(): boolean;
    substituteBattler(): any;
    tpbBaseSpeed(): number;
    tpbReferenceTime(): 60 | 240;
    updateTpb(): void;
}
declare function Game_Party(...args: any[]): void;
declare class Game_Party {
    constructor(...args: any[]);
    constructor: typeof Game_Party;
    initialize(): void;
    _gold: any;
    _steps: number;
    _lastItem: Game_Item;
    _menuActorId: any;
    _targetActorId: any;
    _actors: any[];
    initAllItems(): void;
    _items: {};
    _weapons: {};
    _armors: {};
    exists(): boolean;
    size(): number;
    isEmpty(): boolean;
    members(): any[];
    allMembers(): any[];
    battleMembers(): any[];
    hiddenBattleMembers(): any[];
    allBattleMembers(): any[];
    maxBattleMembers(): number;
    leader(): any;
    removeInvalidMembers(): void;
    reviveBattleMembers(): void;
    items(): any[];
    weapons(): any[];
    armors(): any[];
    equipItems(): any[];
    allItems(): any[];
    itemContainer(item: any): {};
    setupStartingMembers(): void;
    name(): any;
    setupBattleTest(): void;
    setupBattleTestMembers(): void;
    setupBattleTestItems(): void;
    highestLevel(): number;
    addActor(actorId: any): void;
    removeActor(actorId: any): void;
    gold(): any;
    gainGold(amount: any): void;
    loseGold(amount: any): void;
    maxGold(): number;
    steps(): number;
    increaseSteps(): void;
    numItems(item: any): any;
    maxItems(): number;
    hasMaxItems(item: any): boolean;
    hasItem(item: any, includeEquip: any): boolean;
    isAnyMemberEquipped(item: any): boolean;
    gainItem(item: any, amount: any, includeEquip: any): void;
    discardMembersEquip(item: any, amount: any): void;
    loseItem(item: any, amount: any, includeEquip: any): void;
    consumeItem(item: any): void;
    canUse(item: any): boolean;
    canInput(): boolean;
    isAllDead(): any;
    isEscaped(): boolean;
    onPlayerWalk(): void;
    menuActor(): any;
    setMenuActor(actor: any): void;
    makeMenuActorNext(): void;
    makeMenuActorPrevious(): void;
    targetActor(): any;
    setTargetActor(actor: any): void;
    lastItem(): any;
    setLastItem(item: any): void;
    swapOrder(index1: any, index2: any): void;
    charactersForSavefile(): any[][];
    facesForSavefile(): any[][];
    partyAbility(abilityId: any): boolean;
    hasEncounterHalf(): boolean;
    hasEncounterNone(): boolean;
    hasCancelSurprise(): boolean;
    hasRaisePreemptive(): boolean;
    hasGoldDouble(): boolean;
    hasDropItemDouble(): boolean;
    ratePreemptive(troopAgi: any): number;
    rateSurprise(troopAgi: any): number;
    performVictory(): void;
    performEscape(): void;
    removeBattleStates(): void;
    requestMotionRefresh(): void;
    onEscapeFailure(): void;
}
declare namespace Game_Party {
    const ABILITY_ENCOUNTER_HALF: number;
    const ABILITY_ENCOUNTER_NONE: number;
    const ABILITY_CANCEL_SURPRISE: number;
    const ABILITY_RAISE_PREEMPTIVE: number;
    const ABILITY_GOLD_DOUBLE: number;
    const ABILITY_DROP_ITEM_DOUBLE: number;
}
declare function Game_Troop(...args: any[]): void;
declare class Game_Troop {
    constructor(...args: any[]);
    constructor: typeof Game_Troop;
    initialize(): void;
    _interpreter: Game_Interpreter;
    isEventRunning(): boolean;
    updateInterpreter(): void;
    turnCount(): number;
    members(): any[];
    clear(): void;
    _troopId: any;
    _eventFlags: {};
    _enemies: any[];
    _turnCount: number;
    _namesCount: {};
    troop(): any;
    setup(troopId: any): void;
    makeUniqueNames(): void;
    updatePluralFlags(): void;
    letterTable(): string[];
    enemyNames(): any[];
    meetsConditions(page: any): boolean;
    setupBattleEvent(): void;
    increaseTurn(): void;
    expTotal(): any;
    goldTotal(): number;
    goldRate(): 2 | 1;
    makeDropItems(): any;
    isTpbTurnEnd(): boolean;
}
declare namespace Game_Troop {
    const LETTER_TABLE_HALF: string[];
    const LETTER_TABLE_FULL: string[];
}
declare function Game_Map(...args: any[]): void;
declare class Game_Map {
    constructor(...args: any[]);
    initialize(): void;
    _interpreter: Game_Interpreter;
    _mapId: any;
    _tilesetId: any;
    _events: any[];
    _commonEvents: any[];
    _vehicles: any[];
    _displayX: any;
    _displayY: any;
    _nameDisplay: boolean;
    _scrollDirection: any;
    _scrollRest: any;
    _scrollSpeed: any;
    _parallaxName: any;
    _parallaxZero: any;
    _parallaxLoopX: any;
    _parallaxLoopY: any;
    _parallaxSx: any;
    _parallaxSy: any;
    _parallaxX: any;
    _parallaxY: any;
    _battleback1Name: any;
    _battleback2Name: any;
    setup(mapId: any): void;
    _needsRefresh: boolean;
    isEventRunning(): boolean;
    tileWidth(): any;
    tileHeight(): any;
    bushDepth(): number;
    mapId(): any;
    tilesetId(): any;
    displayX(): any;
    displayY(): any;
    parallaxName(): any;
    battleback1Name(): any;
    battleback2Name(): any;
    requestRefresh(): void;
    isNameDisplayEnabled(): boolean;
    disableNameDisplay(): void;
    enableNameDisplay(): void;
    createVehicles(): void;
    refereshVehicles(): void;
    vehicles(): any[];
    vehicle(type: any): any;
    boat(): any;
    ship(): any;
    airship(): any;
    setupEvents(): void;
    events(): any[];
    event(eventId: any): any;
    eraseEvent(eventId: any): void;
    autorunCommonEvents(): any;
    parallelCommonEvents(): any;
    setupScroll(): void;
    setupParallax(): void;
    setupBattleback(): void;
    setDisplayPos(x: any, y: any): void;
    parallaxOx(): number;
    parallaxOy(): number;
    tileset(): any;
    tilesetFlags(): any;
    displayName(): any;
    width(): any;
    height(): any;
    data(): any;
    isLoopHorizontal(): boolean;
    isLoopVertical(): boolean;
    isDashDisabled(): any;
    encounterList(): any;
    encounterStep(): any;
    isOverworld(): boolean;
    screenTileX(): number;
    screenTileY(): number;
    adjustX(x: any): any;
    adjustY(y: any): any;
    roundX(x: any): any;
    roundY(y: any): any;
    xWithDirection(x: any, d: any): any;
    yWithDirection(y: any, d: any): any;
    roundXWithDirection(x: any, d: any): any;
    roundYWithDirection(y: any, d: any): any;
    deltaX(x1: any, x2: any): number;
    deltaY(y1: any, y2: any): number;
    distance(x1: any, y1: any, x2: any, y2: any): number;
    canvasToMapX(x: any): any;
    canvasToMapY(y: any): any;
    autoplay(): void;
    refreshIfNeeded(): void;
    refresh(): void;
    refreshTileEvents(): void;
    _tileEvents: any[];
    eventsXy(x: any, y: any): any[];
    eventsXyNt(x: any, y: any): any[];
    tileEventsXy(x: any, y: any): any[];
    eventIdXy(x: any, y: any): any;
    scrollDown(distance: any): void;
    scrollLeft(distance: any): void;
    scrollRight(distance: any): void;
    scrollUp(distance: any): void;
    isValid(x: any, y: any): boolean;
    checkPassage(x: any, y: any, bit: any): boolean;
    tileId(x: any, y: any, z: any): any;
    layeredTiles(x: any, y: any): any[];
    allTiles(x: any, y: any): any[];
    autotileType(x: any, y: any, z: any): number;
    isPassable(x: any, y: any, d: any): boolean;
    isBoatPassable(x: any, y: any): boolean;
    isShipPassable(x: any, y: any): boolean;
    isAirshipLandOk(x: any, y: any): boolean;
    checkLayeredTilesFlags(x: any, y: any, bit: any): boolean;
    isLadder(x: any, y: any): boolean;
    isBush(x: any, y: any): boolean;
    isCounter(x: any, y: any): boolean;
    isDamageFloor(x: any, y: any): boolean;
    terrainTag(x: any, y: any): number;
    regionId(x: any, y: any): any;
    startScroll(direction: any, distance: any, speed: any): void;
    isScrolling(): boolean;
    update(sceneActive: any): void;
    updateScroll(): void;
    scrollDistance(): number;
    doScroll(direction: any, distance: any): void;
    updateEvents(): void;
    updateVehicles(): void;
    updateParallax(): void;
    changeTileset(tilesetId: any): void;
    changeBattleback(battleback1Name: any, battleback2Name: any): void;
    changeParallax(name: any, loopX: any, loopY: any, sx: any, sy: any): void;
    updateInterpreter(): void;
    unlockEvent(eventId: any): void;
    setupStartingEvent(): boolean;
    setupTestEvent(): boolean;
    setupStartingMapEvent(): boolean;
    setupAutorunCommonEvent(): boolean;
    isAnyEventStarting(): boolean;
}
declare function Game_CommonEvent(...args: any[]): void;
declare class Game_CommonEvent {
    constructor(...args: any[]);
    initialize(commonEventId: any): void;
    _commonEventId: any;
    event(): any;
    list(): any;
    refresh(): void;
    _interpreter: Game_Interpreter;
    isActive(): any;
    update(): void;
}
declare function Game_CharacterBase(...args: any[]): void;
declare class Game_CharacterBase {
    constructor(...args: any[]);
    initialize(): void;
    initMembers(): void;
    _x: any;
    _y: any;
    _realX: any;
    _realY: any;
    _moveSpeed: any;
    _moveFrequency: any;
    _opacity: any;
    _blendMode: any;
    _direction: any;
    _pattern: any;
    _priorityType: any;
    _tileId: any;
    _characterName: any;
    _characterIndex: any;
    _isObjectCharacter: any;
    _walkAnime: any;
    _stepAnime: any;
    _directionFix: any;
    _through: any;
    _transparent: any;
    _bushDepth: any;
    _animationId: number;
    _balloonId: number;
    _animationPlaying: boolean;
    _balloonPlaying: boolean;
    _animationCount: number;
    _stopCount: number;
    _jumpCount: number;
    _jumpPeak: number;
    _movementSuccess: any;
    pos(x: any, y: any): boolean;
    posNt(x: any, y: any): boolean;
    moveSpeed(): any;
    setMoveSpeed(moveSpeed: any): void;
    moveFrequency(): any;
    setMoveFrequency(moveFrequency: any): void;
    opacity(): any;
    setOpacity(opacity: any): void;
    blendMode(): any;
    setBlendMode(blendMode: any): void;
    isNormalPriority(): boolean;
    setPriorityType(priorityType: any): void;
    isMoving(): boolean;
    isJumping(): boolean;
    jumpHeight(): number;
    isStopping(): boolean;
    checkStop(threshold: any): boolean;
    resetStopCount(): void;
    realMoveSpeed(): any;
    distancePerFrame(): number;
    isDashing(): boolean;
    isDebugThrough(): boolean;
    straighten(): void;
    reverseDir(d: any): number;
    canPass(x: any, y: any, d: any): boolean;
    canPassDiagonally(x: any, y: any, horz: any, vert: any): boolean;
    isMapPassable(x: any, y: any, d: any): any;
    isCollidedWithCharacters(x: any, y: any): any;
    isCollidedWithEvents(x: any, y: any): any;
    isCollidedWithVehicles(x: any, y: any): any;
    setPosition(x: any, y: any): void;
    copyPosition(character: any): void;
    locate(x: any, y: any): void;
    direction(): any;
    setDirection(d: any): void;
    isTile(): boolean;
    isObjectCharacter(): any;
    shiftY(): 0 | 6;
    scrolledX(): any;
    scrolledY(): any;
    screenX(): number;
    screenY(): number;
    screenZ(): number;
    isNearTheScreen(): boolean;
    update(): void;
    updateStop(): void;
    updateJump(): void;
    updateMove(): void;
    updateAnimation(): void;
    animationWait(): number;
    updateAnimationCount(): void;
    updatePattern(): void;
    maxPattern(): number;
    pattern(): any;
    setPattern(pattern: any): void;
    isOriginalPattern(): boolean;
    resetPattern(): void;
    refreshBushDepth(): void;
    isOnLadder(): any;
    isOnBush(): any;
    terrainTag(): any;
    regionId(): any;
    increaseSteps(): void;
    tileId(): any;
    characterName(): any;
    characterIndex(): any;
    setImage(characterName: any, characterIndex: any): void;
    setTileImage(tileId: any): void;
    checkEventTriggerTouchFront(d: any): void;
    checkEventTriggerTouch(): boolean;
    isMovementSucceeded(): any;
    setMovementSuccess(success: any): void;
    moveStraight(d: any): void;
    moveDiagonally(horz: any, vert: any): void;
    jump(xPlus: any, yPlus: any): void;
    hasWalkAnime(): any;
    setWalkAnime(walkAnime: any): void;
    hasStepAnime(): any;
    setStepAnime(stepAnime: any): void;
    isDirectionFixed(): any;
    setDirectionFix(directionFix: any): void;
    isThrough(): any;
    setThrough(through: any): void;
    isTransparent(): any;
    bushDepth(): any;
    setTransparent(transparent: any): void;
    startAnimation(): void;
    startBalloon(): void;
    isAnimationPlaying(): boolean;
    isBalloonPlaying(): boolean;
    endAnimation(): void;
    endBalloon(): void;
}
declare function Game_Character(...args: any[]): void;
declare class Game_Character {
    constructor(...args: any[]);
    constructor: typeof Game_Character;
    initialize(): void;
    initMembers(): void;
    _moveRouteForcing: boolean;
    _moveRoute: any;
    _moveRouteIndex: any;
    _originalMoveRoute: any;
    _originalMoveRouteIndex: any;
    _waitCount: number;
    memorizeMoveRoute(): void;
    restoreMoveRoute(): void;
    isMoveRouteForcing(): boolean;
    setMoveRoute(moveRoute: any): void;
    forceMoveRoute(moveRoute: any): void;
    updateStop(): void;
    updateRoutineMove(): void;
    processMoveCommand(command: any): void;
    deltaXFrom(x: any): any;
    deltaYFrom(y: any): any;
    moveRandom(): void;
    moveTowardCharacter(character: any): void;
    moveAwayFromCharacter(character: any): void;
    turnTowardCharacter(character: any): void;
    turnAwayFromCharacter(character: any): void;
    turnTowardPlayer(): void;
    turnAwayFromPlayer(): void;
    moveTowardPlayer(): void;
    moveAwayFromPlayer(): void;
    moveForward(): void;
    moveBackward(): void;
    processRouteEnd(): void;
    advanceMoveRouteIndex(): void;
    turnRight90(): void;
    turnLeft90(): void;
    turn180(): void;
    turnRightOrLeft90(): void;
    turnRandom(): void;
    swap(character: any): void;
    findDirectionTo(goalX: any, goalY: any): 0 | 4 | 2 | 6 | 8;
    searchLimit(): number;
}
declare namespace Game_Character {
    const ROUTE_END: number;
    const ROUTE_MOVE_DOWN: number;
    const ROUTE_MOVE_LEFT: number;
    const ROUTE_MOVE_RIGHT: number;
    const ROUTE_MOVE_UP: number;
    const ROUTE_MOVE_LOWER_L: number;
    const ROUTE_MOVE_LOWER_R: number;
    const ROUTE_MOVE_UPPER_L: number;
    const ROUTE_MOVE_UPPER_R: number;
    const ROUTE_MOVE_RANDOM: number;
    const ROUTE_MOVE_TOWARD: number;
    const ROUTE_MOVE_AWAY: number;
    const ROUTE_MOVE_FORWARD: number;
    const ROUTE_MOVE_BACKWARD: number;
    const ROUTE_JUMP: number;
    const ROUTE_WAIT: number;
    const ROUTE_TURN_DOWN: number;
    const ROUTE_TURN_LEFT: number;
    const ROUTE_TURN_RIGHT: number;
    const ROUTE_TURN_UP: number;
    const ROUTE_TURN_90D_R: number;
    const ROUTE_TURN_90D_L: number;
    const ROUTE_TURN_180D: number;
    const ROUTE_TURN_90D_R_L: number;
    const ROUTE_TURN_RANDOM: number;
    const ROUTE_TURN_TOWARD: number;
    const ROUTE_TURN_AWAY: number;
    const ROUTE_SWITCH_ON: number;
    const ROUTE_SWITCH_OFF: number;
    const ROUTE_CHANGE_SPEED: number;
    const ROUTE_CHANGE_FREQ: number;
    const ROUTE_WALK_ANIME_ON: number;
    const ROUTE_WALK_ANIME_OFF: number;
    const ROUTE_STEP_ANIME_ON: number;
    const ROUTE_STEP_ANIME_OFF: number;
    const ROUTE_DIR_FIX_ON: number;
    const ROUTE_DIR_FIX_OFF: number;
    const ROUTE_THROUGH_ON: number;
    const ROUTE_THROUGH_OFF: number;
    const ROUTE_TRANSPARENT_ON: number;
    const ROUTE_TRANSPARENT_OFF: number;
    const ROUTE_CHANGE_IMAGE: number;
    const ROUTE_CHANGE_OPACITY: number;
    const ROUTE_CHANGE_BLEND_MODE: number;
    const ROUTE_PLAY_SE: number;
    const ROUTE_SCRIPT: number;
}
declare function Game_Player(...args: any[]): void;
declare class Game_Player {
    constructor(...args: any[]);
    constructor: typeof Game_Player;
    initialize(): void;
    initMembers(): void;
    _vehicleType: string;
    _vehicleGettingOn: boolean;
    _vehicleGettingOff: boolean;
    _dashing: any;
    _needsMapReload: boolean;
    _transferring: boolean;
    _newMapId: any;
    _newX: any;
    _newY: any;
    _newDirection: any;
    _fadeType: any;
    _followers: Game_Followers;
    _encounterCount: any;
    clearTransferInfo(): void;
    followers(): Game_Followers;
    refresh(): void;
    isStopping(): any;
    reserveTransfer(mapId: any, x: any, y: any, d: any, fadeType: any): void;
    setupForNewGame(): void;
    requestMapReload(): void;
    isTransferring(): boolean;
    newMapId(): any;
    fadeType(): any;
    performTransfer(): void;
    isMapPassable(x: any, y: any, d: any): any;
    vehicle(): any;
    isInBoat(): boolean;
    isInShip(): boolean;
    isInAirship(): boolean;
    isInVehicle(): boolean;
    isNormal(): boolean;
    isDashing(): any;
    isDebugThrough(): any;
    isCollided(x: any, y: any): any;
    centerX(): number;
    centerY(): number;
    center(x: any, y: any): any;
    locate(x: any, y: any): void;
    increaseSteps(): void;
    makeEncounterCount(): void;
    makeEncounterTroopId(): any;
    meetsEncounterConditions(encounter: any): any;
    executeEncounter(): boolean;
    startMapEvent(x: any, y: any, triggers: any, normal: any): void;
    moveByInput(): void;
    canMove(): boolean;
    getInputDirection(): any;
    executeMove(direction: any): void;
    update(sceneActive: any): void;
    updateDashing(): void;
    isDashButtonPressed(): boolean;
    updateScroll(lastScrolledX: any, lastScrolledY: any): void;
    updateVehicle(): void;
    updateVehicleGetOn(): void;
    updateVehicleGetOff(): void;
    updateNonmoving(wasMoving: any, sceneActive: any): void;
    triggerAction(): boolean;
    triggerButtonAction(): boolean;
    triggerTouchAction(): any;
    triggerTouchActionD1(x1: any, y1: any): any;
    triggerTouchActionD2(x2: any, y2: any): any;
    triggerTouchActionD3(x2: any, y2: any): any;
    updateEncounterCount(): void;
    canEncounter(): boolean;
    encounterProgressValue(): number;
    checkEventTriggerHere(triggers: any): void;
    checkEventTriggerThere(triggers: any): void;
    checkEventTriggerTouch(x: any, y: any): void;
    canStartLocalEvents(): boolean;
    getOnOffVehicle(): boolean;
    getOnVehicle(): boolean;
    getOffVehicle(): boolean;
    forceMoveForward(): void;
    isOnDamageFloor(): boolean;
    moveStraight(d: any): void;
    moveDiagonally(horz: any, vert: any): void;
    jump(xPlus: any, yPlus: any): void;
    showFollowers(): void;
    hideFollowers(): void;
    gatherFollowers(): void;
    areFollowersGathering(): boolean;
    areFollowersGathered(): boolean;
}
declare function Game_Follower(...args: any[]): void;
declare class Game_Follower {
    constructor(...args: any[]);
    constructor: typeof Game_Follower;
    initialize(memberIndex: any): void;
    _memberIndex: any;
    refresh(): void;
    actor(): any;
    isVisible(): any;
    isGathered(): any;
    update(): void;
    chaseCharacter(character: any): void;
}
declare function Game_Followers(...args: any[]): void;
declare class Game_Followers {
    constructor(...args: any[]);
    initialize(): void;
    _visible: any;
    _gathering: boolean;
    _data: any[];
    setup(): void;
    isVisible(): any;
    show(): void;
    hide(): void;
    data(): any;
    reverseData(): any;
    follower(index: any): any;
    refresh(): void;
    update(): void;
    updateMove(): void;
    jumpAll(): void;
    synchronize(x: any, y: any, d: any): void;
    gather(): void;
    areGathering(): boolean;
    visibleFollowers(): any[];
    areMoving(): boolean;
    areGathered(): boolean;
    isSomeoneCollided(x: any, y: any): boolean;
}
declare function Game_Vehicle(...args: any[]): void;
declare class Game_Vehicle {
    constructor(...args: any[]);
    constructor: typeof Game_Vehicle;
    initialize(type: any): void;
    _type: any;
    initMembers(): void;
    _mapId: any;
    _altitude: number;
    _driving: boolean;
    _bgm: any;
    isBoat(): boolean;
    isShip(): boolean;
    isAirship(): boolean;
    resetDirection(): void;
    initMoveSpeed(): void;
    vehicle(): any;
    loadSystemSettings(): void;
    refresh(): void;
    setLocation(mapId: any, x: any, y: any): void;
    pos(x: any, y: any): any;
    isMapPassable(x: any, y: any, d: any): any;
    getOn(): void;
    getOff(): void;
    setBgm(bgm: any): void;
    playBgm(): void;
    syncWithPlayer(): void;
    screenY(): number;
    shadowX(): any;
    shadowY(): number;
    shadowOpacity(): number;
    canMove(): boolean;
    update(): void;
    updateAirship(): void;
    updateAirshipAltitude(): void;
    maxAltitude(): number;
    isLowest(): boolean;
    isHighest(): boolean;
    isTakeoffOk(): any;
    isLandOk(x: any, y: any, d: any): boolean;
}
declare function Game_Event(...args: any[]): void;
declare class Game_Event {
    constructor(...args: any[]);
    constructor: typeof Game_Event;
    initialize(mapId: any, eventId: any): void;
    _mapId: any;
    _eventId: any;
    initMembers(): void;
    _moveType: any;
    _trigger: any;
    _starting: boolean;
    _erased: boolean;
    _pageIndex: any;
    _originalPattern: any;
    _originalDirection: any;
    _prelockDirection: any;
    _locked: boolean;
    eventId(): any;
    event(): any;
    page(): any;
    list(): any;
    isCollidedWithCharacters(x: any, y: any): any;
    isCollidedWithEvents(x: any, y: any): boolean;
    isCollidedWithPlayerCharacters(x: any, y: any): any;
    lock(): void;
    unlock(): void;
    updateStop(): void;
    updateSelfMovement(): void;
    stopCountThreshold(): number;
    moveTypeRandom(): void;
    moveTypeTowardPlayer(): void;
    isNearThePlayer(): boolean;
    moveTypeCustom(): void;
    isStarting(): boolean;
    clearStartingFlag(): void;
    isTriggerIn(triggers: any): any;
    start(): void;
    erase(): void;
    refresh(): void;
    findProperPageIndex(): number;
    meetsConditions(page: any): boolean;
    setupPage(): void;
    clearPageSettings(): void;
    _interpreter: Game_Interpreter;
    setupPageSettings(): void;
    isOriginalPattern(): boolean;
    resetPattern(): void;
    checkEventTriggerTouch(x: any, y: any): void;
    checkEventTriggerAuto(): void;
    update(): void;
    updateParallel(): void;
    locate(x: any, y: any): void;
    forceMoveRoute(moveRoute: any): void;
}
declare function Game_Interpreter(...args: any[]): void;
declare class Game_Interpreter {
    constructor(...args: any[]);
    initialize(depth: any): void;
    _depth: any;
    _branch: {};
    _indent: any;
    _frameCount: any;
    _freezeChecker: number;
    checkOverflow(): void;
    clear(): void;
    _mapId: any;
    _eventId: any;
    _list: any;
    _index: any;
    _waitCount: any;
    _waitMode: any;
    _comments: string | any[];
    _characterId: any;
    _childInterpreter: Game_Interpreter;
    setup(list: any, eventId: any): void;
    loadImages(): void;
    eventId(): any;
    isOnCurrentMap(): boolean;
    setupReservedCommonEvent(): boolean;
    isRunning(): boolean;
    update(): void;
    updateChild(): boolean;
    updateWait(): boolean;
    updateWaitCount(): boolean;
    updateWaitMode(): boolean;
    setWaitMode(waitMode: any): void;
    wait(duration: any): void;
    fadeSpeed(): number;
    executeCommand(): boolean;
    checkFreeze(): boolean;
    terminate(): void;
    skipBranch(): void;
    currentCommand(): any;
    nextEventCode(): any;
    iterateActorId(param: any, callback: any): void;
    iterateActorEx(param1: any, param2: any, callback: any): void;
    iterateActorIndex(param: any, callback: any): void;
    iterateEnemyIndex(param: any, callback: any): void;
    iterateBattler(param1: any, param2: any, callback: any): void;
    character(param: any): any;
    operateValue(operation: any, operandType: any, operand: any): any;
    changeHp(target: any, value: any, allowDeath: any): void;
    command101(params: any): boolean;
    command102(params: any): boolean;
    setupChoices(params: any): void;
    command402(params: any): boolean;
    command403(): boolean;
    command103(params: any): boolean;
    setupNumInput(params: any): void;
    command104(params: any): boolean;
    setupItemChoice(params: any): void;
    command105(params: any): boolean;
    command108(params: any): boolean;
    command109(): boolean;
    command111(params: any): boolean;
    command411(): boolean;
    command112(): boolean;
    command413(): boolean;
    command113(): boolean;
    command115(): boolean;
    command117(params: any): boolean;
    setupChild(list: any, eventId: any): void;
    command118(): boolean;
    command119(params: any): boolean;
    jumpTo(index: any): void;
    command121(params: any): boolean;
    command122(params: any): boolean;
    gameDataOperand(type: any, param1: any, param2: any): any;
    operateVariable(variableId: any, operationType: any, value: any): void;
    command123(params: any): boolean;
    command124(params: any): boolean;
    command125(params: any): boolean;
    command126(params: any): boolean;
    command127(params: any): boolean;
    command128(params: any): boolean;
    command129(params: any): boolean;
    command132(params: any): boolean;
    command133(params: any): boolean;
    command134(params: any): boolean;
    command135(params: any): boolean;
    command136(params: any): boolean;
    command137(params: any): boolean;
    command138(params: any): boolean;
    command139(params: any): boolean;
    command140(params: any): boolean;
    command201(params: any): boolean;
    command202(params: any): boolean;
    command203(params: any): boolean;
    command204(params: any): boolean;
    command205(params: any): boolean;
    command206(): boolean;
    command211(params: any): boolean;
    command212(params: any): boolean;
    command213(params: any): boolean;
    command214(): boolean;
    command216(params: any): boolean;
    command217(): boolean;
    command221(): boolean;
    command222(): boolean;
    command223(params: any): boolean;
    command224(params: any): boolean;
    command225(params: any): boolean;
    command230(params: any): boolean;
    command231(params: any): boolean;
    command232(params: any): boolean;
    picturePoint(params: any): Point;
    command233(params: any): boolean;
    command234(params: any): boolean;
    command235(params: any): boolean;
    command236(params: any): boolean;
    command241(params: any): boolean;
    command242(params: any): boolean;
    command243(): boolean;
    command244(): boolean;
    command245(params: any): boolean;
    command246(params: any): boolean;
    command249(params: any): boolean;
    command250(params: any): boolean;
    command251(): boolean;
    command261(params: any): boolean;
    videoFileExt(): ".webm" | ".mp4";
    command281(params: any): boolean;
    command282(params: any): boolean;
    command283(params: any): boolean;
    command284(params: any): boolean;
    command285(params: any): boolean;
    command301(params: any): boolean;
    command601(): boolean;
    command602(): boolean;
    command603(): boolean;
    command302(params: any): boolean;
    command303(params: any): boolean;
    command311(params: any): boolean;
    command312(params: any): boolean;
    command326(params: any): boolean;
    command313(params: any): boolean;
    command314(params: any): boolean;
    command315(params: any): boolean;
    command316(params: any): boolean;
    command317(params: any): boolean;
    command318(params: any): boolean;
    command319(params: any): boolean;
    command320(params: any): boolean;
    command321(params: any): boolean;
    command322(params: any): boolean;
    command323(params: any): boolean;
    command324(params: any): boolean;
    command325(params: any): boolean;
    command331(params: any): boolean;
    command332(params: any): boolean;
    command342(params: any): boolean;
    command333(params: any): boolean;
    command334(params: any): boolean;
    command335(params: any): boolean;
    command336(params: any): boolean;
    command337(params: any): boolean;
    command339(params: any): boolean;
    command340(): boolean;
    command351(): boolean;
    command352(): boolean;
    command353(): boolean;
    command354(): boolean;
    command355(): boolean;
    command356(params: any): boolean;
    pluginCommand(): void;
    command357(params: any): boolean;
}
