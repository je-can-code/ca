declare function Scene_Base(...args: any[]): void;
declare class Scene_Base {
    constructor(...args: any[]);
    constructor: typeof Scene_Base;
    initialize(): void;
    _started: boolean;
    _active: boolean;
    _fadeSign: number;
    _fadeDuration: any;
    _fadeWhite: any;
    _fadeOpacity: number;
    create(): void;
    isActive(): boolean;
    isReady(): any;
    start(): void;
    update(): void;
    stop(): void;
    isStarted(): boolean;
    isBusy(): boolean;
    isFading(): boolean;
    terminate(): void;
    createWindowLayer(): void;
    _windowLayer: WindowLayer;
    addWindow(window: any): void;
    startFadeIn(duration: any, white: any): void;
    startFadeOut(duration: any, white: any): void;
    createColorFilter(): void;
    _colorFilter: ColorFilter;
    filters: ColorFilter[];
    updateColorFilter(): void;
    updateFade(): void;
    updateChildren(): void;
    popScene(): void;
    checkGameover(): void;
    fadeOutAll(): void;
    fadeSpeed(): number;
    slowFadeSpeed(): number;
    scaleSprite(sprite: any): void;
    centerSprite(sprite: any): void;
    isBottomHelpMode(): boolean;
    isBottomButtonMode(): boolean;
    isRightInputMode(): boolean;
    mainCommandWidth(): number;
    buttonAreaTop(): number;
    buttonAreaBottom(): number;
    buttonAreaHeight(): number;
    buttonY(): number;
    calcWindowHeight(numLines: any, selectable: any): any;
    requestAutosave(): void;
    isAutosaveEnabled(): any;
    executeAutosave(): void;
    onAutosaveSuccess(): void;
    onAutosaveFailure(): void;
}
declare function Scene_Boot(...args: any[]): void;
declare class Scene_Boot {
    constructor(...args: any[]);
    constructor: typeof Scene_Boot;
    initialize(): void;
    _databaseLoaded: boolean;
    create(): void;
    isReady(): any;
    onDatabaseLoaded(): void;
    setEncryptionInfo(): void;
    loadSystemImages(): void;
    loadPlayerData(): void;
    loadGameFonts(): void;
    isPlayerDataLoaded(): any;
    start(): void;
    startNormalGame(): void;
    resizeScreen(): void;
    adjustBoxSize(): void;
    adjustWindow(): void;
    updateDocumentTitle(): void;
    checkPlayerLocation(): void;
}
declare function Scene_Title(...args: any[]): void;
declare class Scene_Title {
    constructor(...args: any[]);
    constructor: typeof Scene_Title;
    initialize(): void;
    create(): void;
    start(): void;
    update(): void;
    isBusy(): any;
    terminate(): void;
    createBackground(): void;
    _backSprite1: Sprite;
    _backSprite2: Sprite;
    createForeground(): void;
    _gameTitleSprite: Sprite;
    drawGameTitle(): void;
    adjustBackground(): void;
    createCommandWindow(): void;
    _commandWindow: Window_TitleCommand;
    commandWindowRect(): Rectangle;
    commandNewGame(): void;
    commandContinue(): void;
    commandOptions(): void;
    playTitleMusic(): void;
}
declare function Scene_Message(...args: any[]): void;
declare class Scene_Message {
    constructor(...args: any[]);
    constructor: typeof Scene_Message;
    initialize(): void;
    isMessageWindowClosing(): any;
    createAllWindows(): void;
    createMessageWindow(): void;
    _messageWindow: Window_Message;
    messageWindowRect(): Rectangle;
    createScrollTextWindow(): void;
    _scrollTextWindow: Window_ScrollText;
    scrollTextWindowRect(): Rectangle;
    createGoldWindow(): void;
    _goldWindow: Window_Gold;
    goldWindowRect(): Rectangle;
    createNameBoxWindow(): void;
    _nameBoxWindow: Window_NameBox;
    createChoiceListWindow(): void;
    _choiceListWindow: Window_ChoiceList;
    createNumberInputWindow(): void;
    _numberInputWindow: Window_NumberInput;
    createEventItemWindow(): void;
    _eventItemWindow: Window_EventItem;
    eventItemWindowRect(): Rectangle;
    associateWindows(): void;
}
declare function Scene_Map(...args: any[]): void;
declare class Scene_Map {
    constructor(...args: any[]);
    constructor: typeof Scene_Map;
    initialize(): void;
    _waitCount: number;
    _encounterEffectDuration: number;
    _mapLoaded: boolean;
    _touchCount: number;
    _menuEnabled: any;
    create(): void;
    _transfer: any;
    _lastMapWasNull: boolean;
    isReady(): any;
    onMapLoaded(): void;
    onTransfer(): void;
    start(): void;
    menuCalling: boolean;
    onTransferEnd(): void;
    shouldAutosave(): boolean;
    update(): void;
    updateMainMultiply(): void;
    updateMain(): void;
    isPlayerActive(): boolean;
    isFastForward(): boolean;
    stop(): void;
    isBusy(): any;
    terminate(): void;
    needsFadeIn(): any;
    needsSlowFadeOut(): any;
    updateWaitCount(): boolean;
    updateDestination(): void;
    updateMenuButton(): void;
    hideMenuButton(): void;
    updateMapNameWindow(): void;
    isMenuEnabled(): boolean;
    isMapTouchOk(): any;
    processMapTouch(): void;
    isAnyButtonPressed(): any;
    onMapTouch(): void;
    isSceneChangeOk(): boolean;
    updateScene(): void;
    createDisplayObjects(): void;
    createSpriteset(): void;
    _spriteset: Spriteset_Map;
    createAllWindows(): void;
    createMapNameWindow(): void;
    _mapNameWindow: Window_MapName;
    mapNameWindowRect(): Rectangle;
    createButtons(): void;
    createMenuButton(): void;
    _menuButton: Sprite_Button;
    updateTransferPlayer(): void;
    updateEncounter(): void;
    updateCallMenu(): void;
    isMenuCalled(): boolean;
    callMenu(): void;
    updateCallDebug(): void;
    isDebugCalled(): any;
    fadeInForTransfer(): void;
    fadeOutForTransfer(): void;
    launchBattle(): void;
    stopAudioOnBattleStart(): void;
    startEncounterEffect(): void;
    updateEncounterEffect(): void;
    snapForBattleBackground(): void;
    startFlashForEncounter(duration: any): void;
    encounterEffectSpeed(): number;
}
declare function Scene_MenuBase(...args: any[]): void;
declare class Scene_MenuBase {
    constructor(...args: any[]);
    constructor: typeof Scene_MenuBase;
    initialize(): void;
    create(): void;
    update(): void;
    helpAreaTop(): any;
    helpAreaBottom(): any;
    helpAreaHeight(): any;
    mainAreaTop(): any;
    mainAreaBottom(): any;
    mainAreaHeight(): number;
    actor(): any;
    updateActor(): void;
    _actor: any;
    createBackground(): void;
    _backgroundFilter: any;
    _backgroundSprite: Sprite;
    setBackgroundOpacity(opacity: any): void;
    createHelpWindow(): void;
    _helpWindow: Window_Help;
    helpWindowRect(): Rectangle;
    createButtons(): void;
    needsCancelButton(): boolean;
    createCancelButton(): void;
    _cancelButton: Sprite_Button;
    needsPageButtons(): boolean;
    createPageButtons(): void;
    _pageupButton: Sprite_Button;
    _pagedownButton: Sprite_Button;
    updatePageButtons(): void;
    arePageButtonsEnabled(): boolean;
    nextActor(): void;
    previousActor(): void;
    onActorChange(): void;
}
declare function Scene_Menu(...args: any[]): void;
declare class Scene_Menu {
    constructor(...args: any[]);
    constructor: typeof Scene_Menu;
    initialize(): void;
    helpAreaHeight(): number;
    create(): void;
    start(): void;
    createCommandWindow(): void;
    _commandWindow: Window_MenuCommand;
    commandWindowRect(): Rectangle;
    createGoldWindow(): void;
    _goldWindow: Window_Gold;
    goldWindowRect(): Rectangle;
    createStatusWindow(): void;
    _statusWindow: Window_MenuStatus;
    statusWindowRect(): Rectangle;
    commandItem(): void;
    commandPersonal(): void;
    commandFormation(): void;
    commandOptions(): void;
    commandSave(): void;
    commandGameEnd(): void;
    onPersonalOk(): void;
    onPersonalCancel(): void;
    onFormationOk(): void;
    onFormationCancel(): void;
}
declare function Scene_ItemBase(...args: any[]): void;
declare class Scene_ItemBase {
    constructor(...args: any[]);
    constructor: typeof Scene_ItemBase;
    initialize(): void;
    create(): void;
    createActorWindow(): void;
    _actorWindow: Window_MenuActor;
    actorWindowRect(): Rectangle;
    item(): any;
    user(): any;
    isCursorLeft(): boolean;
    showActorWindow(): void;
    hideActorWindow(): void;
    isActorWindowActive(): any;
    onActorOk(): void;
    onActorCancel(): void;
    determineItem(): void;
    useItem(): void;
    activateItemWindow(): void;
    itemTargetActors(): any;
    canUse(): any;
    isItemEffectsValid(): any;
    applyItem(): void;
    checkCommonEvent(): void;
}
declare function Scene_Item(...args: any[]): void;
declare class Scene_Item {
    constructor(...args: any[]);
    constructor: typeof Scene_Item;
    initialize(): void;
    create(): void;
    createCategoryWindow(): void;
    _categoryWindow: Window_ItemCategory;
    categoryWindowRect(): Rectangle;
    createItemWindow(): void;
    _itemWindow: Window_ItemList;
    itemWindowRect(): Rectangle;
    user(): any;
    onCategoryOk(): void;
    onItemOk(): void;
    onItemCancel(): void;
    playSeForItem(): void;
    useItem(): void;
}
declare function Scene_Skill(...args: any[]): void;
declare class Scene_Skill {
    constructor(...args: any[]);
    constructor: typeof Scene_Skill;
    initialize(): void;
    create(): void;
    start(): void;
    createSkillTypeWindow(): void;
    _skillTypeWindow: Window_SkillType;
    skillTypeWindowRect(): Rectangle;
    createStatusWindow(): void;
    _statusWindow: Window_SkillStatus;
    statusWindowRect(): Rectangle;
    createItemWindow(): void;
    _itemWindow: Window_SkillList;
    itemWindowRect(): Rectangle;
    needsPageButtons(): boolean;
    arePageButtonsEnabled(): boolean;
    refreshActor(): void;
    user(): any;
    commandSkill(): void;
    onItemOk(): void;
    onItemCancel(): void;
    playSeForItem(): void;
    useItem(): void;
    onActorChange(): void;
}
declare function Scene_Equip(...args: any[]): void;
declare class Scene_Equip {
    constructor(...args: any[]);
    constructor: typeof Scene_Equip;
    initialize(): void;
    create(): void;
    createStatusWindow(): void;
    _statusWindow: Window_EquipStatus;
    statusWindowRect(): Rectangle;
    createCommandWindow(): void;
    _commandWindow: Window_EquipCommand;
    commandWindowRect(): Rectangle;
    createSlotWindow(): void;
    _slotWindow: Window_EquipSlot;
    slotWindowRect(): Rectangle;
    createItemWindow(): void;
    _itemWindow: Window_EquipItem;
    itemWindowRect(): Rectangle;
    statusWidth(): number;
    needsPageButtons(): boolean;
    arePageButtonsEnabled(): boolean;
    refreshActor(): void;
    commandEquip(): void;
    commandOptimize(): void;
    commandClear(): void;
    onSlotOk(): void;
    onSlotCancel(): void;
    onItemOk(): void;
    executeEquipChange(): void;
    onItemCancel(): void;
    onActorChange(): void;
    hideItemWindow(): void;
}
declare function Scene_Status(...args: any[]): void;
declare class Scene_Status {
    constructor(...args: any[]);
    constructor: typeof Scene_Status;
    initialize(): void;
    create(): void;
    helpAreaHeight(): number;
    createProfileWindow(): void;
    _profileWindow: Window_Help;
    profileWindowRect(): Rectangle;
    createStatusWindow(): void;
    _statusWindow: Window_Status;
    statusWindowRect(): Rectangle;
    createStatusParamsWindow(): void;
    _statusParamsWindow: Window_StatusParams;
    statusParamsWindowRect(): Rectangle;
    createStatusEquipWindow(): void;
    _statusEquipWindow: Window_StatusEquip;
    statusEquipWindowRect(): Rectangle;
    statusParamsWidth(): number;
    statusParamsHeight(): any;
    profileHeight(): any;
    start(): void;
    needsPageButtons(): boolean;
    refreshActor(): void;
    onActorChange(): void;
}
declare function Scene_Options(...args: any[]): void;
declare class Scene_Options {
    constructor(...args: any[]);
    constructor: typeof Scene_Options;
    initialize(): void;
    create(): void;
    terminate(): void;
    createOptionsWindow(): void;
    _optionsWindow: Window_Options;
    optionsWindowRect(): Rectangle;
    maxCommands(): number;
    maxVisibleCommands(): number;
}
declare function Scene_File(...args: any[]): void;
declare class Scene_File {
    constructor(...args: any[]);
    constructor: typeof Scene_File;
    initialize(): void;
    create(): void;
    helpAreaHeight(): number;
    start(): void;
    savefileId(): any;
    isSavefileEnabled(savefileId: any): boolean;
    createHelpWindow(): void;
    _helpWindow: Window_Help;
    helpWindowRect(): Rectangle;
    createListWindow(): void;
    _listWindow: Window_SavefileList;
    listWindowRect(): Rectangle;
    mode(): any;
    needsAutosave(): any;
    activateListWindow(): void;
    helpWindowText(): string;
    firstSavefileId(): number;
    onSavefileOk(): void;
}
declare function Scene_Save(...args: any[]): void;
declare class Scene_Save {
    constructor(...args: any[]);
    constructor: typeof Scene_Save;
    initialize(): void;
    mode(): string;
    helpWindowText(): any;
    firstSavefileId(): any;
    onSavefileOk(): void;
    executeSave(savefileId: any): void;
    onSaveSuccess(): void;
    onSaveFailure(): void;
}
declare function Scene_Load(...args: any[]): void;
declare class Scene_Load {
    constructor(...args: any[]);
    constructor: typeof Scene_Load;
    initialize(): void;
    _loadSuccess: boolean;
    terminate(): void;
    mode(): string;
    helpWindowText(): any;
    firstSavefileId(): any;
    onSavefileOk(): void;
    executeLoad(savefileId: any): void;
    onLoadSuccess(): void;
    onLoadFailure(): void;
    reloadMapIfUpdated(): void;
}
declare function Scene_GameEnd(...args: any[]): void;
declare class Scene_GameEnd {
    constructor(...args: any[]);
    constructor: typeof Scene_GameEnd;
    initialize(): void;
    create(): void;
    stop(): void;
    createBackground(): void;
    createCommandWindow(): void;
    _commandWindow: Window_GameEnd;
    commandWindowRect(): Rectangle;
    commandToTitle(): void;
}
declare function Scene_Shop(...args: any[]): void;
declare class Scene_Shop {
    constructor(...args: any[]);
    constructor: typeof Scene_Shop;
    initialize(): void;
    prepare(goods: any, purchaseOnly: any): void;
    _goods: any;
    _purchaseOnly: any;
    _item: any;
    create(): void;
    createGoldWindow(): void;
    _goldWindow: Window_Gold;
    goldWindowRect(): Rectangle;
    createCommandWindow(): void;
    _commandWindow: Window_ShopCommand;
    commandWindowRect(): Rectangle;
    createDummyWindow(): void;
    _dummyWindow: Window_Base;
    dummyWindowRect(): Rectangle;
    createNumberWindow(): void;
    _numberWindow: Window_ShopNumber;
    numberWindowRect(): Rectangle;
    createStatusWindow(): void;
    _statusWindow: Window_ShopStatus;
    statusWindowRect(): Rectangle;
    createBuyWindow(): void;
    _buyWindow: Window_ShopBuy;
    buyWindowRect(): Rectangle;
    createCategoryWindow(): void;
    _categoryWindow: Window_ItemCategory;
    categoryWindowRect(): Rectangle;
    createSellWindow(): void;
    _sellWindow: Window_ShopSell;
    sellWindowRect(): Rectangle;
    statusWidth(): number;
    activateBuyWindow(): void;
    activateSellWindow(): void;
    commandBuy(): void;
    commandSell(): void;
    onBuyOk(): void;
    onBuyCancel(): void;
    onCategoryOk(): void;
    onCategoryCancel(): void;
    onSellOk(): void;
    onSellCancel(): void;
    onNumberOk(): void;
    onNumberCancel(): void;
    doBuy(number: any): void;
    doSell(number: any): void;
    endNumberInput(): void;
    maxBuy(): number;
    maxSell(): any;
    money(): any;
    currencyUnit(): any;
    buyingPrice(): any;
    sellingPrice(): number;
}
declare function Scene_Name(...args: any[]): void;
declare class Scene_Name {
    constructor(...args: any[]);
    constructor: typeof Scene_Name;
    initialize(): void;
    prepare(actorId: any, maxLength: any): void;
    _actorId: any;
    _maxLength: any;
    create(): void;
    _actor: any;
    start(): void;
    createEditWindow(): void;
    _editWindow: Window_NameEdit;
    editWindowRect(): Rectangle;
    createInputWindow(): void;
    _inputWindow: Window_NameInput;
    inputWindowRect(): Rectangle;
    onInputOk(): void;
}
declare function Scene_Debug(...args: any[]): void;
declare class Scene_Debug {
    constructor(...args: any[]);
    constructor: typeof Scene_Debug;
    initialize(): void;
    create(): void;
    needsCancelButton(): boolean;
    createRangeWindow(): void;
    _rangeWindow: Window_DebugRange;
    rangeWindowRect(): Rectangle;
    createEditWindow(): void;
    _editWindow: Window_DebugEdit;
    editWindowRect(): Rectangle;
    createDebugHelpWindow(): void;
    _debugHelpWindow: Window_Base;
    debugHelpWindowRect(): Rectangle;
    onRangeOk(): void;
    onEditCancel(): void;
    refreshHelpWindow(): void;
    helpText(): string;
}
declare function Scene_Battle(...args: any[]): void;
declare class Scene_Battle {
    constructor(...args: any[]);
    constructor: typeof Scene_Battle;
    initialize(): void;
    create(): void;
    start(): void;
    update(): void;
    updateVisibility(): void;
    updateBattleProcess(): void;
    isTimeActive(): boolean;
    isAnyInputWindowActive(): any;
    changeInputWindow(): void;
    stop(): void;
    terminate(): void;
    shouldAutosave(): any;
    needsSlowFadeOut(): any;
    updateLogWindowVisibility(): void;
    updateStatusWindowVisibility(): void;
    shouldOpenStatusWindow(): boolean;
    updateStatusWindowPosition(): void;
    statusWindowX(): any;
    updateInputWindowVisibility(): void;
    needsInputWindowChange(): boolean;
    updateCancelButton(): void;
    createDisplayObjects(): void;
    createSpriteset(): void;
    _spriteset: Spriteset_Battle;
    createAllWindows(): void;
    createLogWindow(): void;
    _logWindow: Window_BattleLog;
    logWindowRect(): Rectangle;
    createStatusWindow(): void;
    _statusWindow: Window_BattleStatus;
    statusWindowRect(): Rectangle;
    createPartyCommandWindow(): void;
    _partyCommandWindow: Window_PartyCommand;
    partyCommandWindowRect(): Rectangle;
    createActorCommandWindow(): void;
    _actorCommandWindow: Window_ActorCommand;
    actorCommandWindowRect(): Rectangle;
    createHelpWindow(): void;
    _helpWindow: Window_Help;
    helpWindowRect(): Rectangle;
    createSkillWindow(): void;
    _skillWindow: Window_BattleSkill;
    skillWindowRect(): Rectangle;
    createItemWindow(): void;
    _itemWindow: Window_BattleItem;
    itemWindowRect(): Rectangle;
    createActorWindow(): void;
    _actorWindow: Window_BattleActor;
    actorWindowRect(): Rectangle;
    createEnemyWindow(): void;
    _enemyWindow: Window_BattleEnemy;
    enemyWindowRect(): Rectangle;
    helpAreaTop(): number;
    helpAreaBottom(): any;
    helpAreaHeight(): any;
    buttonAreaTop(): any;
    windowAreaHeight(): any;
    createButtons(): void;
    createCancelButton(): void;
    _cancelButton: Sprite_Button;
    closeCommandWindows(): void;
    hideSubInputWindows(): void;
    startPartyCommandSelection(): void;
    commandFight(): void;
    commandEscape(): void;
    startActorCommandSelection(): void;
    commandAttack(): void;
    commandSkill(): void;
    commandGuard(): void;
    commandItem(): void;
    commandCancel(): void;
    selectNextCommand(): void;
    selectPreviousCommand(): void;
    startActorSelection(): void;
    onActorOk(): void;
    onActorCancel(): void;
    startEnemySelection(): void;
    onEnemyOk(): void;
    onEnemyCancel(): void;
    onSkillOk(): void;
    onSkillCancel(): void;
    onItemOk(): void;
    onItemCancel(): void;
    onSelectAction(): void;
    endCommandSelection(): void;
}
declare function Scene_Gameover(...args: any[]): void;
declare class Scene_Gameover {
    constructor(...args: any[]);
    constructor: typeof Scene_Gameover;
    initialize(): void;
    create(): void;
    start(): void;
    update(): void;
    stop(): void;
    terminate(): void;
    playGameoverMusic(): void;
    createBackground(): void;
    _backSprite: Sprite;
    adjustBackground(): void;
    isTriggered(): boolean;
    gotoTitle(): void;
}
